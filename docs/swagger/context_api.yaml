openapi: 3.0.0
info:
  title: MCP Server Context API
  description: API for managing conversation contexts in the MCP Server
  version: 1.0.0
  
servers:
  - url: /api/v1
    description: MCP Server API v1

paths:
  /contexts:
    get:
      summary: List contexts for an agent
      description: Returns a list of contexts for the specified agent, optionally filtered by session ID
      parameters:
        - name: agent_id
          in: query
          required: true
          description: The agent ID
          schema:
            type: string
        - name: session_id
          in: query
          required: false
          description: Optional session ID filter
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Maximum number of contexts to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Context'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          
    post:
      summary: Create a new context
      description: Creates a new conversation context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Context'
      responses:
        '201':
          description: Context created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          
  /contexts/{contextID}:
    get:
      summary: Get a context by ID
      description: Returns a context by its ID
      parameters:
        - name: contextID
          in: path
          required: true
          description: The context ID
          schema:
            type: string
        - name: include_content
          in: query
          required: false
          description: Whether to include content items in the response
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Context not found
        '500':
          description: Internal server error
          
    put:
      summary: Update a context
      description: Updates an existing context
      parameters:
        - name: contextID
          in: path
          required: true
          description: The context ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextUpdateRequest'
      responses:
        '200':
          description: Context updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Context not found
        '500':
          description: Internal server error
          
    delete:
      summary: Delete a context
      description: Deletes a context by its ID
      parameters:
        - name: contextID
          in: path
          required: true
          description: The context ID
          schema:
            type: string
      responses:
        '200':
          description: Context deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: context deleted
        '401':
          description: Unauthorized
        '404':
          description: Context not found
        '500':
          description: Internal server error
          
  /contexts/{contextID}/summary:
    get:
      summary: Get a summary of a context
      description: Returns a summary of a context
      parameters:
        - name: contextID
          in: path
          required: true
          description: The context ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  context_id:
                    type: string
                  summary:
                    type: string
                  _links:
                    type: object
                    properties:
                      self:
                        type: string
                      context:
                        type: string
        '401':
          description: Unauthorized
        '404':
          description: Context not found
        '500':
          description: Internal server error
          
  /contexts/{contextID}/search:
    post:
      summary: Search within a context
      description: Searches for text within a context
      parameters:
        - name: contextID
          in: path
          required: true
          description: The context ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: The search query
              required:
                - query
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  context_id:
                    type: string
                  query:
                    type: string
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContextItem'
                  _links:
                    type: object
                    properties:
                      self:
                        type: string
                      context:
                        type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Context not found
        '500':
          description: Internal server error
          
components:
  schemas:
    Context:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the context
        agent_id:
          type: string
          description: Identifier for the AI agent
        model_id:
          type: string
          description: Identifier for the AI model
        session_id:
          type: string
          description: Optional identifier for the user session
        content:
          type: array
          description: Array of context items
          items:
            $ref: '#/components/schemas/ContextItem'
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true
        current_tokens:
          type: integer
          description: Current token count
        max_tokens:
          type: integer
          description: Maximum token limit
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        expires_at:
          type: string
          format: date-time
          description: Optional expiration timestamp
        _links:
          type: object
          description: HATEOAS links
          additionalProperties:
            type: string
      required:
        - agent_id
        - model_id
        
    ContextItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the context item
        role:
          type: string
          description: Role of the context item (e.g., user, assistant, system)
          enum: [user, assistant, system, tool, webhook]
        content:
          type: string
          description: Text content of the context item
        tokens:
          type: integer
          description: Token count for this item
        timestamp:
          type: string
          format: date-time
          description: Timestamp when this item was created
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true
      required:
        - role
        - content
        
    ContextUpdateOptions:
      type: object
      properties:
        truncate:
          type: boolean
          description: Whether to truncate the context if it exceeds max tokens
          default: false
        truncate_strategy:
          type: string
          description: Strategy for truncation
          enum: [oldest_first, preserving_user, relevance_based]
          default: oldest_first
        replace_content:
          type: boolean
          description: Whether to replace the entire content instead of appending
          default: false
        relevance_parameters:
          type: object
          description: Parameters for relevance-based operations
          additionalProperties: true
          
    ContextUpdateRequest:
      type: object
      properties:
        context:
          $ref: '#/components/schemas/Context'
        options:
          $ref: '#/components/schemas/ContextUpdateOptions'
      required:
        - context
        
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
