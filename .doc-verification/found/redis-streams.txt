./apps/mcp-server/internal/api/websocket/agent_message_broker.go:	// Redis Streams client
./pkg/webhook/context_lifecycle_redis_test.go:func createRedisClient(t *testing.T, addr string) *redis.StreamsClient {
./pkg/webhook/context_lifecycle_redis_test.go:func testDistributedLockingWithRealRedis(t *testing.T, redisClient *redis.StreamsClient) {
./pkg/webhook/context_lifecycle_redis_test.go:func testBatchProcessingWithRealRedis(t *testing.T, redisClient *redis.StreamsClient) {
./pkg/webhook/context_lifecycle_redis_test.go:func testSearchPerformanceWithRealRedis(t *testing.T, redisClient *redis.StreamsClient) {
./pkg/webhook/context_lifecycle_redis_test.go:func testConcurrentTransitionsWithRealRedis(t *testing.T, redisClient *redis.StreamsClient) {
./pkg/webhook/consumer.go:// WebhookConsumer consumes webhook events from Redis Streams
./pkg/webhook/consumer.go:	err := client.XGroupCreateMkStream(ctx, c.config.StreamKey, c.config.ConsumerGroup, "$").Err()
./pkg/webhook/consumer.go:	err = client.XGroupCreateMkStream(ctx, c.config.DeadLetterStream, c.config.ConsumerGroup, "$").Err()
./pkg/webhook/consumer_test.go:		err := redisClient.XGroupCreateMkStream(ctx, consumer.config.StreamKey, consumer.config.ConsumerGroup, "0").Err()
./pkg/webhook/context_lifecycle_integration_test.go:func setupTestRedis(t *testing.T) *redis.StreamsClient {
./pkg/webhook/context_lifecycle_integration_test.go:func cleanupTestRedis(client *redis.StreamsClient) {
./pkg/redis/streams_client_test.go:	t.Skip("miniredis doesn't support Redis Streams - requires real Redis")
./pkg/redis/streams_client.go:// StreamsConfig represents the configuration for Redis Streams
./pkg/redis/streams_client.go:// DefaultConfig returns a default configuration for Redis Streams
./pkg/redis/streams_client.go:// StreamsClient provides Redis Streams functionality with connection pooling
./pkg/redis/streams_client.go:// NewStreamsClient creates a new Redis Streams client
./pkg/redis/streams_client.go:	return c.client.XGroupCreate(ctx, stream, group, start).Err()
./pkg/redis/streams_client.go:	return c.client.XGroupCreateMkStream(ctx, stream, group, start).Err()
./pkg/queue/queue.go:	// Create Redis Streams client
./pkg/queue/queue.go:		return nil, fmt.Errorf("failed to create Redis Streams client: %w", err)
