package embedding

import (
	"context"
)

// ModelType represents the type of embedding model
type ModelType string

const (
	// ModelTypeOpenAI represents OpenAI embedding models
	ModelTypeOpenAI ModelType = "openai"
	// ModelTypeHuggingFace represents HuggingFace embedding models
	ModelTypeHuggingFace ModelType = "huggingface"
	// ModelTypeBedrock represents AWS Bedrock embedding models
	ModelTypeBedrock ModelType = "bedrock"
	// ModelTypeAnthropic represents direct Anthropic API embedding models
	ModelTypeAnthropic ModelType = "anthropic"
	// ModelTypeCustom represents custom embedding models
	ModelTypeCustom ModelType = "custom"
)

// ModelConfig contains configuration for embedding models
type ModelConfig struct {
	// Type of the embedding model
	Type ModelType `json:"type"`
	
	// Name/ID of the model
	Name string `json:"name"`
	
	// API key for the model service (if applicable)
	APIKey string `json:"api_key,omitempty"`
	
	// Endpoint URL for custom models
	Endpoint string `json:"endpoint,omitempty"`
	
	// Dimensions of the embedding vectors produced by this model
	Dimensions int `json:"dimensions"`
	
	// Additional configuration parameters specific to the model type
	Parameters map[string]interface{} `json:"parameters,omitempty"`
}

// EmbeddingVector represents a vector embedding with metadata
type EmbeddingVector struct {
	// The actual embedding vector values
	Vector []float32 `json:"vector"`
	
	// Dimensions of the vector
	Dimensions int `json:"dimensions"`
	
	// Model ID used to generate this embedding
	ModelID string `json:"model_id"`
	
	// ContentType indicates what type of content this is an embedding for
	ContentType string `json:"content_type"`
	
	// ContentID is a unique identifier for the content
	ContentID string `json:"content_id"`
	
	// Metadata about the embedding and content
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// EmbeddingService defines the interface for generating embeddings
type EmbeddingService interface {
	// GenerateEmbedding creates an embedding for a single text
	GenerateEmbedding(ctx context.Context, text string, contentType string, contentID string) (*EmbeddingVector, error)
	
	// BatchGenerateEmbeddings creates embeddings for multiple texts
	BatchGenerateEmbeddings(ctx context.Context, texts []string, contentType string, contentIDs []string) ([]*EmbeddingVector, error)
	
	// GetModelConfig returns the model configuration
	GetModelConfig() ModelConfig
	
	// GetModelDimensions returns the dimensions of the embeddings generated by this model
	GetModelDimensions() int
}

// EmbeddingStorage defines the interface for storing and retrieving embeddings
type EmbeddingStorage interface {
	// StoreEmbedding stores a single embedding
	StoreEmbedding(ctx context.Context, embedding *EmbeddingVector) error
	
	// BatchStoreEmbeddings stores multiple embeddings in a batch
	BatchStoreEmbeddings(ctx context.Context, embeddings []*EmbeddingVector) error
	
	// FindSimilarEmbeddings finds embeddings similar to the provided one
	FindSimilarEmbeddings(ctx context.Context, embedding *EmbeddingVector, limit int, threshold float32) ([]*EmbeddingVector, error)
	
	// GetEmbeddingsByContentIDs retrieves embeddings by content IDs
	GetEmbeddingsByContentIDs(ctx context.Context, contentIDs []string) ([]*EmbeddingVector, error)
	
	// DeleteEmbeddingsByContentIDs deletes embeddings by content IDs
	DeleteEmbeddingsByContentIDs(ctx context.Context, contentIDs []string) error
}

// EmbeddingPipeline coordinates the embedding generation and storage process
type EmbeddingPipeline interface {
	// ProcessContent processes content to generate and store embeddings
	ProcessContent(ctx context.Context, content string, contentType string, contentID string) error
	
	// BatchProcessContent processes multiple content items in a batch
	BatchProcessContent(ctx context.Context, contents []string, contentType string, contentIDs []string) error
	
	// ProcessCodeChunks processes code chunks to generate and store embeddings
	ProcessCodeChunks(ctx context.Context, contentType string, contentID string, chunkIDs []string) error
	
	// ProcessIssues processes GitHub issues to generate and store embeddings
	ProcessIssues(ctx context.Context, ownerRepo string, issueNumbers []int) error
	
	// ProcessDiscussions processes GitHub discussions to generate and store embeddings
	ProcessDiscussions(ctx context.Context, ownerRepo string, discussionIDs []string) error
}
