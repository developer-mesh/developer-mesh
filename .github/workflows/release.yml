name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  GO_VERSION: '1.24'
  DOCKER_BUILDKIT: 1

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse ${PREVIOUS_TAG}..HEAD)
          fi
          
          # Group changes by type
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "### Features" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" | grep -E "^- feat" || echo "- No new features" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Bug Fixes" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" | grep -E "^- fix" || echo "- No bug fixes" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Other Changes" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" | grep -vE "^- (feat|fix)" || echo "- No other changes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        # Use the newer softprops/action-gh-release action
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            - `ghcr.io/${{ github.repository }}/mcp-server:${{ steps.get_version.outputs.version }}`
            - `ghcr.io/${{ github.repository }}/rest-api:${{ steps.get_version.outputs.version }}`
            - `ghcr.io/${{ github.repository }}/worker:${{ steps.get_version.outputs.version }}`
            
            ## Installation
            
            ### Docker
            ```bash
            docker pull ghcr.io/${{ github.repository }}/mcp-server:${{ steps.get_version.outputs.version }}
            docker pull ghcr.io/${{ github.repository }}/rest-api:${{ steps.get_version.outputs.version }}
            docker pull ghcr.io/${{ github.repository }}/worker:${{ steps.get_version.outputs.version }}
            ```
            
            ### Binary
            Download the appropriate binary for your platform from the assets below.
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
          generate_release_notes: true

  build-binaries:
    name: Build Binaries
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        app: [mcp-server, rest-api, worker]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          # WORKAROUND: Disable cache due to go.work issues
          # TODO: Remove when https://github.com/actions/setup-go/issues/482 is fixed
          cache: false

      - name: Set up Go workspace
        run: |
          if [ ! -f "go.work" ]; then
            go work init
            for dir in apps/mcp-server apps/rest-api apps/worker pkg; do
              [ -f "$dir/go.mod" ] && go work use "$dir"
            done
          fi
          go work sync

      - name: Build
        run: |
          cd apps/${{ matrix.app }}
          # Create output directory
          mkdir -p dist
          
          # Build with proper versioning
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 go build \
            -ldflags="-w -s -X main.Version=${{ needs.release.outputs.version }} -X main.CommitSHA=${{ github.sha }} -X main.BuildTime=${BUILD_TIME}" \
            -o dist/${{ matrix.app }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
            ./cmd/*
          
          # Create checksum
          cd dist
          sha256sum ${{ matrix.app }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} > ${{ matrix.app }}-${{ matrix.goos }}-${{ matrix.goarch }}.sha256

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            apps/${{ matrix.app }}/dist/${{ matrix.app }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
            apps/${{ matrix.app }}/dist/${{ matrix.app }}-${{ matrix.goos }}-${{ matrix.goarch }}.sha256

  docker-release:
    name: Build and Push Docker Images
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [mcp-server, rest-api, worker]
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.app }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{version}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_TIME=${{ github.event.repository.updated_at }}
            GO_VERSION=${{ env.GO_VERSION }}