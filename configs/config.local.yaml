# MCP Server Configuration

# Environment (dev, staging, prod)
environment: "dev"

# AWS Service Configurations disabled for local testing
# aws:
#   # RDS Aurora PostgreSQL Configuration
#   rds:
#     auth:
#       region: "us-west-2"
#     host: "your-aurora-cluster.cluster-xxxxxxxxx.us-west-2.rds.amazonaws.com"
#     port: 5432
#     database: "mcp"
#     username: "mcp_admin"
#     password: "" # Leave empty when using IAM authentication
#     use_iam_auth: true # IAM authentication is the default and recommended method
#     token_expiration: 900 # 15 minutes in seconds
#     max_open_conns: 25
#     max_idle_conns: 5
#     conn_max_lifetime: 5m
#     enable_pooling: true
#     min_pool_size: 2
#     max_pool_size: 10
#     connection_timeout: 30
#   
#   # ElastiCache Redis Configuration
#   elasticache:
#     auth:
#       region: "us-west-2"
#     primary_endpoint: "your-redis-cluster.xxxxxx.clustercfg.usw2.cache.amazonaws.com"
#     port: 6379
#     username: "mcp_cache_user"
#     password: "" # Leave empty when using IAM authentication
#     use_iam_auth: true # IAM authentication is the default and recommended method
#     cluster_mode: true
#     cluster_name: "mcp-cache"
#     cluster_discovery: true
#     use_tls: true
#     insecure_skip_verify: false # Set to true only for testing
#     max_retries: 3
#     min_idle_connections: 2
#     pool_size: 10
#     dial_timeout: 5
#     read_timeout: 3
#     write_timeout: 3
#     pool_timeout: 4
#     token_expiration: 900 # 15 minutes in seconds
  
  # Note: S3 Configuration for context storage has been removed as it is no longer supported

# Storage Configuration
# Note: Context storage configurations have been removed as they are no longer supported

# API Server Configuration
api:
  listen_address: ":8080"
  read_timeout: 30s
  write_timeout: 30s
  idle_timeout: 60s
  enable_cors: true
  
  # Authentication
  auth:
    jwt_secret: "local-test-jwt-secret"
    api_keys:
      admin: "local-admin-api-key"
      reader: "local-reader-api-key"
  
  # Rate Limiting
  rate_limit:
    enabled: true
    limit: 100
    period: 1m
    burst_factor: 3
  
  # Note: Agent Webhook has been removed as it is no longer supported
  
  # DevOps Tool Webhooks
  webhooks:
    github:
      enabled: true
      path: "/github"
      secret: "change-this-to-a-secure-webhook-secret"
    
    # Note: Harness, SonarQube, Artifactory, and JFrog Xray webhook support has been removed

# Database Configuration
database:
  driver: "postgres"
  dsn: "postgres://postgres:postgres@postgres:5432/mcp?sslmode=disable" # Docker Compose Postgres hostname
  max_open_conns: 25
  max_idle_conns: 5
  conn_max_lifetime: 30m

# Cache Configuration
cache:
  type: "redis"
  address: "redis:6379" # Docker Compose Redis hostname
  password: ""
  db: 0
  pool_size: 10
  min_idle_conns: 2
  dial_timeout: 5s
  read_timeout: 3s
  write_timeout: 3s

# Core Engine Configuration
engine:
  event_buffer_size: 10000
  concurrency_limit: 10
  event_timeout: 30s
  
  # Security Settings
  security:
    safe_mode: true  # Enable safety checks for all operations
    audit_logging: true  # Log all adapter operations for audit purposes

# DevOps Tool Adapters - All configured to use mock responses for testing
adapters:
  github:
    api_token: "test-github-token"
    webhook_secret: "test-github-webhook-secret"
    request_timeout: 30s
    retry_max: 3
    retry_delay: 1s
    mock_responses: true
    mock_url: "http://localhost:8081/mock-github"

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    path: "/metrics"
  
  logging:
    level: "info"
    format: "json"
    output: "stdout"
    file_path: ""
