# Production Configuration
# Inherits from config.base.yaml with production-specific overrides

# Import base configuration
_base: config.base.yaml

# Environment
environment: "production"

# API Server - Production settings
api:
  listen_address: ":${PORT:-8080}"
  enable_swagger: false  # Disable in production
  enable_pprof: false    # Disable profiling
  
  # TLS Configuration
  tls:
    enabled: ${TLS_ENABLED:-true}
    cert_file: "${TLS_CERT_FILE}"
    key_file: "${TLS_KEY_FILE}"
    min_version: "1.3"  # TLS 1.3 for production
    client_auth: "${TLS_CLIENT_AUTH:-none}"  # Set to "require" for mutual TLS
    client_ca_file: "${TLS_CLIENT_CA_FILE:-}"
    session_tickets: true
    enable_http2: true
    strict_sni: true
    ocsp_stapling: true  # Performance optimization
    
  # CORS - Restricted origins
  cors:
    allowed_origins: ${CORS_ALLOWED_ORIGINS}  # Comma-separated list
    
  # Strict auth required
  auth:
    require_auth: true

# Authentication - Production settings
auth:
  # JWT - Production secrets from environment
  jwt:
    secret: "${JWT_SECRET}"  # Must be set in environment
    expiration: 24h
    refresh_expiration: 7d
    
  # API Keys - Database only, no static keys
  api_keys:
    static_keys: {}  # No hardcoded keys in production
    source: "database"
    
  # Enhanced security
  security:
    max_failed_attempts: 5
    lockout_duration: 15m
    password_min_length: 16
    require_mfa: ${REQUIRE_MFA:-false}
    ip_whitelist: ${IP_WHITELIST:-}  # Comma-separated
    
  # Production rate limiting
  rate_limiting:
    default:
      max_attempts: 100
      window: 1m
      lockout_period: 15m
    per_tenant:
      # Override per tenant in database
      premium:
        max_attempts: 1000
        window: 1m
      standard:
        max_attempts: 100
        window: 1m
      trial:
        max_attempts: 10
        window: 1m
        
  # Audit settings
  audit:
    storage: "database"
    encryption: true
    retention_days: 365  # 1 year for compliance

# WebSocket - Production settings
websocket:
  enabled: true
  max_connections: ${WS_MAX_CONNECTIONS:-50000}  # High capacity for production
  
  # Buffer sizes optimized for Kubernetes
  read_buffer_size: 8192  # 8KB for better performance
  write_buffer_size: 8192  # 8KB
  
  # Connection health
  ping_interval: 30s
  pong_timeout: 60s
  max_message_size: 2097152  # 2MB for larger payloads
  
  # Security - Strict for production
  security:
    require_auth: true
    hmac_signatures: true  # Enable message authentication
    allowed_origins: ${WS_ALLOWED_ORIGINS:-["https://*.yourdomain.com"]}  # Restrict origins
    max_frame_size: 2097152
    
  # Rate limiting - Per user/IP for production
  rate_limit:
    rate: 16.67  # 1000 per minute per connection
    burst: 100
    per_ip: true
    per_user: true
    
  # Connection limits per tenant
  tenant_limits:
    premium:
      max_connections: 1000
      message_rate: 33.33  # 2000/min
    standard:
      max_connections: 100
      message_rate: 16.67  # 1000/min
    trial:
      max_connections: 10
      message_rate: 1.67   # 100/min

# Database - Production RDS
database:
  # AWS RDS Configuration
  host: "${DATABASE_HOST}"
  port: ${DATABASE_PORT:-5432}
  username: "${DATABASE_USER}"
  password: "${DATABASE_PASSWORD}"
  database: "${DATABASE_NAME}"
  ssl_mode: "require"
  
  # TLS Configuration
  tls:
    enabled: true
    min_version: "1.3"  # TLS 1.3 for RDS
    verify_certificates: true
    ca_file: "${RDS_CA_CERT:-/opt/certs/rds-ca-cert.pem}"
  
  # IAM Authentication
  use_iam_auth: ${USE_IAM_AUTH:-false}
  aws_region: "${AWS_REGION}"
  
  # Connection pooling for high load
  max_open_conns: ${DB_MAX_OPEN_CONNS:-100}
  max_idle_conns: ${DB_MAX_IDLE_CONNS:-25}
  conn_max_lifetime: 30m
  
  # Read replicas
  read_replicas:
    enabled: ${USE_READ_REPLICAS:-true}
    hosts: ${READ_REPLICA_HOSTS}  # Comma-separated

# Cache - Production Redis
cache:
  type: "redis"
  address: "${REDIS_ADDR}"
  password: "${ELASTICACHE_AUTH_TOKEN:-}"
  database: 0
  pool_size: ${REDIS_POOL_SIZE:-100}
  min_idle_conns: ${REDIS_MIN_IDLE:-20}
  dial_timeout: ${CACHE_DIAL_TIMEOUT:-10s}
  read_timeout: ${CACHE_READ_TIMEOUT:-5s}
  write_timeout: ${CACHE_WRITE_TIMEOUT:-5s}
  pool_timeout: 5
  max_retries: 3
  
  # TLS Configuration for ElastiCache
  tls:
    enabled: ${CACHE_TLS_ENABLED:-true}
    min_version: "1.2"  # ElastiCache supports TLS 1.2+
    insecure_skip_verify: false
    session_tickets: true
    session_cache_size: 1000

# Monitoring - Production observability
monitoring:
  # Structured logging
  logging:
    level: "${LOG_LEVEL:-info}"
    format: "json"
    output: "stdout"  # Let container runtime handle
    sampling:
      enabled: true
      initial: 100
      thereafter: 100
      
  # Prometheus metrics
  metrics:
    enabled: true
    auth_required: true
    auth_token: "${METRICS_AUTH_TOKEN}"
    
  # Distributed tracing
  tracing:
    enabled: ${TRACING_ENABLED:-true}
    provider: "${TRACING_PROVIDER:-jaeger}"
    endpoint: "${TRACING_ENDPOINT}"
    sample_rate: ${TRACING_SAMPLE_RATE:-0.1}
    
  # Advanced health checks
  health:
    detailed_errors: false  # Don't expose internal details

# Storage - Production S3
storage:
  context:
    provider: "s3"
    
  s3:
    region: "${AWS_REGION}"
    bucket: "${S3_BUCKET}"
    kms_key_id: "${S3_KMS_KEY_ID}"  # Server-side encryption
    
    # S3 performance settings
    upload_concurrency: 10
    download_concurrency: 10
    part_size: 10485760  # 10MB
    
    # Lifecycle policies
    lifecycle:
      enabled: true
      archive_after_days: 90
      delete_after_days: 365

# Engine - Production limits
engine:
  event_buffer_size: 100000
  worker_pool_size: ${WORKER_POOL_SIZE:-20}
  max_concurrent_operations: ${MAX_CONCURRENT_OPS:-50}
  
  # Stricter timeouts
  operation_timeout: 2m
  
  # Circuit breaker for resilience
  circuit_breaker:
    enabled: true
    failure_threshold: 10
    success_threshold: 5
    timeout: 60s

# Adapters - Production endpoints
adapters:
  github:
    token: "${GITHUB_TOKEN}"  # From secrets manager
    webhook_secret: "${GITHUB_WEBHOOK_SECRET}"
    
    # Production GitHub Enterprise
    base_url: "${GITHUB_API_URL:-https://api.github.com}"
    
    # No mocking in production
    mock:
      enabled: false
      
  sonarqube:
    base_url: "${SONARQUBE_URL}"
    token: "${SONARQUBE_TOKEN}"
    
  # Additional production adapters...

# Security - Production hardening
security:
  # Request signing
  request_signing:
    enabled: ${REQUEST_SIGNING_ENABLED:-true}
    algorithm: "HMAC-SHA256"
    
  # Secrets management
  secrets:
    provider: "${SECRETS_PROVIDER:-aws-secrets-manager}"
    aws_region: "${AWS_REGION}"
    key_prefix: "${SECRETS_PREFIX:-devops-mcp/}"
    
  # Network policies
  network:
    enable_private_endpoints: true
    vpc_endpoint_ids: ${VPC_ENDPOINT_IDS}

# High Availability
ha:
  enabled: ${HA_ENABLED:-true}
  
  # Leader election for distributed systems
  leader_election:
    enabled: true
    backend: "redis"
    ttl: 15s
    
  # Graceful degradation
  degradation:
    enabled: true
    thresholds:
      database_latency_ms: 1000
      cache_error_rate: 0.1

# Compliance
compliance:
  # Data residency
  data_residency:
    enabled: ${DATA_RESIDENCY_ENABLED:-true}
    regions: ${ALLOWED_REGIONS}
    
  # Audit requirements
  audit:
    pii_masking: true
    log_retention_days: 2555  # 7 years
    
  # Encryption at rest
  encryption:
    enabled: true
    algorithm: "AES-256-GCM"

# Feature flags - Conservative in production
features:
  experimental_tools: false
  debug_mode: false
  mock_external_services: false

# Embedding Configuration - Production
embedding:
  # Provider Configuration - Enable based on contracts
  providers:
    # OpenAI Provider
    openai:
      enabled: ${OPENAI_ENABLED:-true}
      api_key: "${OPENAI_API_KEY}"  # From secrets manager
      # Rate limiting per provider
      rate_limit:
        requests_per_minute: 3000
        tokens_per_minute: 1000000
      
    # AWS Bedrock Provider
    bedrock:
      enabled: ${BEDROCK_ENABLED:-true}
      region: "${AWS_REGION}"
      # Use VPC endpoint for security
      endpoint: "${BEDROCK_VPC_ENDPOINT:-}"
      # IAM role for authentication
      assume_role_arn: "${BEDROCK_ROLE_ARN:-}"
      
    # Google AI Provider
    google:
      enabled: ${GOOGLE_AI_ENABLED:-false}
      api_key: "${GOOGLE_AI_API_KEY}"  # From secrets manager
      # Custom endpoint for private connectivity
      endpoint: "${GOOGLE_AI_PRIVATE_ENDPOINT:-}"
  
  # Production agent defaults
  default_agent_config:
    embedding_strategy: "quality"  # Prioritize quality in production
    model_preferences:
      primary_models:
        - "text-embedding-3-large"  # Best quality
        - "amazon.titan-embed-text-v2:0"
      fallback_models:
        - "text-embedding-3-small"
        - "text-embedding-ada-002"
    constraints:
      max_tokens_per_request: 8000
      max_cost_per_day: 100.0  # Higher limit for production
      preferred_dimensions: 1536
      allow_dimension_reduction: true
    fallback_behavior:
      enabled: true
      max_retries: 5
      retry_delay: "2s"
      exponential_backoff: true
      use_cache_on_failure: true
  
  # Strict circuit breaker for production
  circuit_breaker:
    failure_threshold: 5
    success_threshold: 3
    timeout: "30s"
    half_open_requests: 3
    
  # Smart routing for production
  router:
    selection_strategy: "smart"  # Intelligent routing
    cost_weight: 0.2
    quality_weight: 0.6  # Quality matters most
    speed_weight: 0.2
    cache_ttl: "15m"  # Longer cache for stability
    
    # Provider health monitoring
    health_check:
      enabled: true
      interval: "30s"
      timeout: "5s"
      
  # Metrics and monitoring
  metrics:
    enabled: true
    export_interval: "10s"
    
    # Cost tracking
    cost_tracking:
      enabled: true
      alert_threshold: 1000.0  # Alert if daily cost exceeds $1000
      
    # Performance tracking
    performance:
      latency_percentiles: [0.5, 0.95, 0.99]
      slow_request_threshold: "5s"
  
  # Security
  security:
    # API key rotation
    api_key_rotation:
      enabled: true
      rotation_period: "30d"
      
    # Request validation
    request_validation:
      max_text_length: 50000
      sanitize_input: true
      
    # PII detection
    pii_detection:
      enabled: true
      redact_pii: true
      
  # High availability
  ha:
    # Provider failover
    provider_failover:
      enabled: true
      health_check_interval: "30s"
      failover_threshold: 3
      
    # Request queuing
    request_queue:
      enabled: true
      max_queue_size: 10000
      queue_timeout: "30s"