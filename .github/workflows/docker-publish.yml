name: Docker Publish

on:
  push:
    branches:
      - main
      - 'release/**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for the Docker images'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io

jobs:
  docker-build-publish:
    name: Build and Publish Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - app: mcp-server
            dockerfile: ./apps/mcp-server/Dockerfile
            context: .
          - app: rest-api
            dockerfile: ./apps/rest-api/Dockerfile
            context: .
          - app: worker
            dockerfile: ./apps/worker/Dockerfile
            context: .
          - app: mockserver
            dockerfile: ./apps/mockserver/Dockerfile
            context: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Convert repository owner to lowercase
        id: lowercase
        run: |
          echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.owner }}/devops-mcp-${{ matrix.app }}
          # Generate tags based on the following patterns
          tags: |
            # Set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Set branch name for branch builds
            type=ref,event=branch
            # Set PR number for PR builds
            type=ref,event=pr
            # Set tag name for tag builds
            type=ref,event=tag
            # Set semantic version tags (v1.2.3 -> 1.2.3, 1.2, 1)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Set sha tag for every build
            type=sha,format=short
            # Set custom tag if provided
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}
          # Generate labels
          labels: |
            org.opencontainers.image.title=${{ matrix.app }}
            org.opencontainers.image.description=DevOps MCP ${{ matrix.app }} service
            org.opencontainers.image.vendor=DevOps MCP
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            maintainer=${{ github.repository_owner }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add build arguments
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.created }}

      - name: Debug metadata
        if: github.event_name != 'pull_request'
        run: |
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "First tag: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
          echo "Version: ${{ steps.meta.outputs.version }}"

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: spdx-json
          output-file: ${{ matrix.app }}-sbom.spdx.json
          upload-artifact: true
          upload-release-assets: ${{ github.event_name == 'release' }}

      # Cosign signing temporarily disabled due to workflow failures
      # TODO: Re-enable once properly configured with GitHub OIDC
      # - name: Install Cosign
      #   if: github.event_name != 'pull_request'
      #   uses: sigstore/cosign-installer@v3
      #   with:
      #     cosign-release: 'v2.2.4'

      # - name: Sign container image
      #   if: github.event_name != 'pull_request'
      #   run: |
      #     # Sign the images with keyless signing (OIDC)
      #     echo "Cosign version:"
      #     cosign version
      #     
      #     echo "Tags to sign: ${{ steps.meta.outputs.tags }}"
      #     
      #     # Sign each tag
      #     for tag in ${{ steps.meta.outputs.tags }}; do
      #       echo "Signing $tag"
      #       cosign sign --yes $tag
      #       echo "Successfully signed $tag"
      #     done

  # Note: Multi-arch manifest creation is handled automatically by docker/build-push-action
  # when platforms are specified. This job is kept as a placeholder for future needs.

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: docker-build-publish
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write
    strategy:
      matrix:
        app: [mcp-server, rest-api, worker, mockserver]

    steps:
      - name: Convert repository owner to lowercase
        id: lowercase
        run: |
          echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.owner }}/devops-mcp-${{ matrix.app }}:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.app }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.app }}.sarif'
          category: 'container-scan-${{ matrix.app }}'

  create-release:
    name: Create Release Summary
    runs-on: ubuntu-latest
    needs: [docker-build-publish, vulnerability-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: read

    steps:
      - name: Convert repository owner to lowercase
        id: lowercase
        run: |
          echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Create Release Notes
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const registry = '${{ env.REGISTRY }}';
            const owner = '${{ steps.lowercase.outputs.owner }}';
            
            const releaseBody = `## Docker Images
            
            The following Docker images have been published to GitHub Container Registry:
            
            ### Pull Commands
            \`\`\`bash
            # MCP Server
            docker pull ${registry}/${owner}/devops-mcp-mcp-server:${tag}
            
            # REST API
            docker pull ${registry}/${owner}/devops-mcp-rest-api:${tag}
            
            # Worker
            docker pull ${registry}/${owner}/devops-mcp-worker:${tag}
            
            # Mock Server
            docker pull ${registry}/${owner}/devops-mcp-mockserver:${tag}
            \`\`\`
            
            ### Multi-Architecture Support
            All images support the following architectures:
            - linux/amd64
            - linux/arm64
            
            ### Image Signing
            All images are signed using Sigstore Cosign. To verify:
            \`\`\`bash
            cosign verify ${registry}/${owner}/devops-mcp-<service>:${tag}
            \`\`\`
            
            ### SBOMs
            Software Bill of Materials (SBOM) files are attached to this release.
            `;
            
            // Check if release exists
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              
              // Update existing release
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                body: release.data.body + '\n\n' + releaseBody
              });
            } catch (error) {
              // Create new release
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${tag}`,
                body: releaseBody,
                draft: false,
                prerelease: tag.includes('-')
              });
            }