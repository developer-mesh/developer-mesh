name: Deploy via SSM (Secure)

on:
  workflow_dispatch:  # Manual trigger for testing
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  AWS_REGION: us-east-1
  INSTANCE_ID: i-08a9a59532aad9879

jobs:
  deploy:
    name: Deploy to EC2 via SSM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check SSM Agent Status
        run: |
          echo "Checking SSM agent status..."
          aws ssm describe-instance-information \
            --filters "Key=InstanceIds,Values=${{ env.INSTANCE_ID }}" \
            --query 'InstanceInformationList[0].PingStatus' \
            --output text

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          cd /home/ec2-user/devops-mcp
          
          # Create .env file
          cat > .env << 'ENVEOF'
          # Database
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=5432
          DATABASE_USER=dbadmin
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=devops_mcp
          DATABASE_SSL_MODE=require
          
          # Redis  
          REDIS_ADDR=${{ secrets.REDIS_ENDPOINT }}
          REDIS_TLS_ENABLED=true
          MCP_REDIS_ADDR=${{ secrets.REDIS_ENDPOINT }}
          MCP_REDIS_TLS_ENABLED=true
          
          # AWS
          AWS_REGION=${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          SQS_QUEUE_URL=${{ secrets.SQS_QUEUE_URL }}
          
          # Application
          ENVIRONMENT=production
          MCP_ENV=production
          ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}
          GITHUB_TOKEN=${{ github.token }}
          ENVEOF
          
          # Login to GHCR
          echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          docker-compose pull
          
          # Restart services
          docker-compose down
          docker-compose up -d
          
          # Wait for services
          sleep 30
          
          # Check status
          docker-compose ps
          EOF

      - name: Upload config files via SSM
        run: |
          # First, create the .env file
          aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["cat > /home/ec2-user/devops-mcp/.env << '\''EOF'\''
# Database
DATABASE_HOST=${{ secrets.DATABASE_HOST }}
DATABASE_PORT=5432
DATABASE_USER=dbadmin
DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
DATABASE_NAME=devops_mcp
DATABASE_SSL_MODE=require

# Redis  
REDIS_ADDR=${{ secrets.REDIS_ENDPOINT }}
REDIS_TLS_ENABLED=true
MCP_REDIS_ADDR=${{ secrets.REDIS_ENDPOINT }}
MCP_REDIS_TLS_ENABLED=true

# AWS
AWS_REGION=${{ env.AWS_REGION }}
AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
S3_BUCKET=${{ secrets.S3_BUCKET }}
SQS_QUEUE_URL=${{ secrets.SQS_QUEUE_URL }}

# Application
ENVIRONMENT=production
MCP_ENV=production
ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}
GITHUB_TOKEN=${{ github.token }}
EOF"]' \
            --output text
            
      - name: Deploy via SSM
        id: deploy
        run: |
          # Run deployment commands
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /home/ec2-user/devops-mcp",
              "echo ${{ github.token }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin",
              "docker-compose pull",
              "docker-compose down",
              "docker-compose up -d",
              "sleep 30",
              "docker-compose ps"
            ]' \
            --query 'Command.CommandId' \
            --output text)
          
          echo "Command ID: $COMMAND_ID"
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT
          
          # Wait for command to complete
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ env.INSTANCE_ID }}" || true

      - name: Get deployment output
        run: |
          aws ssm get-command-invocation \
            --command-id "${{ steps.deploy.outputs.command_id }}" \
            --instance-id "${{ env.INSTANCE_ID }}" \
            --query '[Status,StandardOutputContent]' \
            --output text

      - name: Health Check
        run: |
          sleep 10
          
          # Check MCP server
          response=$(curl -s -o /dev/null -w "%{http_code}" https://mcp.dev-mesh.io/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ MCP Server is healthy"
          else
            echo "‚ùå MCP Server health check failed (HTTP $response)"
            exit 1
          fi
          
          # Check REST API
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api.dev-mesh.io/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ REST API is healthy"
          else
            echo "‚ùå REST API health check failed (HTTP $response)"
            exit 1
          fi

      - name: Deployment Summary
        if: success()
        run: |
          echo "üéâ Deployment Successful via SSM!"
          echo "- MCP Server: https://mcp.dev-mesh.io"
          echo "- REST API: https://api.dev-mesh.io"
          echo "- Deployed using secure SSM (no SSH required)"
          echo "- Commit: ${{ github.sha }}"