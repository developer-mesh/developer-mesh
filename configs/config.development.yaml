# Development Configuration
# Complete configuration for local development

# Environment
environment: "development"

# MCP Server Configuration
mcp_server:
  listen_address: ":8080"  # MCP server port (WebSocket/MCP protocol)
  # Connection to REST API for data operations
  rest_api:
    enabled: true
    base_url: "http://localhost:8081"
    api_key: "${MCP_API_KEY:-dev-admin-key-1234567890}"
    timeout: 30s
    retry_count: 3

# API Server - Development overrides (used by REST API)
api:
  listen_address: ":8081"  # REST API server port
  enable_swagger: true
  enable_pprof: true  # Enable profiling in dev
  
  # TLS Configuration (optional for development HTTPS)
  tls:
    enabled: ${API_TLS_ENABLED:-false}
    cert_file: "${TLS_CERT_FILE:-}"
    key_file: "${TLS_KEY_FILE:-}"
    client_ca_file: "${TLS_CLIENT_CA_FILE:-}"
    min_version: "${TLS_MIN_VERSION:-1.3}"
  
  # CORS - Allow all origins in development
  cors:
    allowed_origins: ["*"]
    
  # Authentication settings for API
  auth:
    require_auth: ${REQUIRE_AUTH:-false}
    # JWT - Short expiration for testing
    jwt_secret: "dev-jwt-secret-minimum-32-characters"
    jwt_expiration: 1h
    
    # Development API keys
    api_keys:
      static_keys:
        "dev-admin-key-1234567890": 
          role: "admin"
          scopes: ["read", "write", "admin"]
          tenant_id: "00000000-0000-0000-0000-000000000001"
        "dev-readonly-key-1234567890":
          role: "reader"
          scopes: ["read"]
          tenant_id: "00000000-0000-0000-0000-000000000001"
        # Test-specific API keys for tenant isolation testing
        "test-key-tenant-1":
          role: "user"
          scopes: ["read", "write"]
          tenant_id: "00000000-0000-0000-0000-000000000001"
        "test-key-tenant-2":
          role: "user"
          scopes: ["read", "write"]
          tenant_id: "00000000-0000-0000-0000-000000000002"
        # Additional keys for multi-agent collaboration within same tenant
        "test-key-agent-1":
          role: "user"
          scopes: ["read", "write"]
          tenant_id: "00000000-0000-0000-0000-000000000001"
          user_id: "agent-1"
        "test-key-agent-2":
          role: "user"
          scopes: ["read", "write"]
          tenant_id: "00000000-0000-0000-0000-000000000001"
          user_id: "agent-2"
        # Keys for capability matching test agents
        "test-key-frontend-dev":
          role: "user"
          scopes: ["read", "write"]
          tenant_id: "00000000-0000-0000-0000-000000000001"
          user_id: "frontend-dev"
        "test-key-backend-dev":
          role: "user"
          scopes: ["read", "write"]
          tenant_id: "00000000-0000-0000-0000-000000000001"
          user_id: "backend-dev"
        "test-key-ml-engineer":
          role: "user"
          scopes: ["read", "write"]
          tenant_id: "00000000-0000-0000-0000-000000000001"
          user_id: "ml-engineer"
        "test-key-devops":
          role: "user"
          scopes: ["read", "write"]
          tenant_id: "00000000-0000-0000-0000-000000000001"
          user_id: "devops"

# Authentication - Development settings (Note: API keys are configured in api.auth.api_keys above)
auth:
  # JWT - Short expiration for testing
  jwt:
    secret: "dev-jwt-secret-minimum-32-characters"
    expiration: 1h
    refresh_expiration: 24h
        
  # Relaxed security in dev
  security:
    max_failed_attempts: 10
    lockout_duration: 1m
    
  # Minimal rate limiting in dev
  rate_limiting:
    default:
      max_attempts: 1000
      window: 1m
      
  # Verbose audit logging
  audit:
    log_level: "debug"
    log_to_console: true

# WebSocket - Development settings
websocket:
  enabled: true  # Enable WebSocket in development
  max_connections: 1000  # Lower limit for local development
  read_buffer_size: 4096
  write_buffer_size: 4096
  ping_interval: 30s
  pong_timeout: 60s
  max_message_size: 1048576  # 1MB
  
  # Security - Relaxed for development
  security:
    require_auth: false  # Disable auth for easier testing
    hmac_signatures: false
    allowed_origins: ["*"]  # Allow all origins in dev
    
  # Rate limiting - Relaxed for development
  rate_limit:
    rate: 100  # 6000 per minute (100 per second) - higher for testing
    burst: 200
    per_ip: false  # Disable IP-based limiting in dev
    per_user: false  # Disable user-based limiting in dev

# Database - Local PostgreSQL
database:
  host: "${DB_HOST:-localhost}"
  port: ${DB_PORT:-5432}
  username: "${DB_USER:-postgres}"
  password: "${DB_PASSWORD:-postgres}"
  database: "devops_mcp_dev"
  ssl_mode: "${DATABASE_SSL_MODE:-disable}"
  
  # TLS Configuration (optional for development)
  tls:
    enabled: ${DATABASE_TLS_ENABLED:-false}
    cert_file: "${DATABASE_TLS_CERT:-}"
    key_file: "${DATABASE_TLS_KEY:-}"
    ca_file: "${DATABASE_TLS_CA:-}"
  
  # Migrations
  migrations:
    auto_migrate: true
    migrations_path: "./migrations"

# Cache - AWS ElastiCache Redis
cache:
  type: "redis"  # Enable Redis caching
  address: "127.0.0.1:6379"  # SSH tunnel to ElastiCache (use 127.0.0.1 not localhost)
  password: "${REDIS_PASSWORD:-}"
  database: 0
  
  # Connection settings for AWS ElastiCache
  pool_size: 50
  min_idle_conns: 10
  dial_timeout: 10s  # Increased for TLS handshake
  read_timeout: 5s   # Increased for stability
  write_timeout: 5s  # Increased for stability
  max_retries: 3
  
  # TLS settings for ElastiCache Serverless (required)
  tls:
    enabled: true  # MUST be enabled - ElastiCache Serverless requires TLS
    min_version: "1.2"  # ElastiCache supports TLS 1.2+
    insecure_skip_verify: true  # Skip cert verification when using SSH tunnel (dev only)
    session_tickets: true  # Performance optimization
    ca_file: "${REDIS_CA_CERT:-}"  # Optional CA cert for verification

# Monitoring - Development settings
monitoring:
  logging:
    level: "debug"
    format: "text"  # Human-readable in dev
    output: "stdout"
    color: true
    
  metrics:
    enabled: true
    
  tracing:
    enabled: false  # Usually disabled in dev

# Storage - Real AWS S3
storage:
  context:
    provider: "${STORAGE_PROVIDER:-s3}"  # Use S3 by default, can override to filesystem
    filesystem:
      base_path: "./data/contexts"
      
  # Real AWS S3 configuration
  s3:
    endpoint: "${S3_ENDPOINT:-}"  # Empty for real AWS S3
    region: "${AWS_REGION:-us-east-1}"
    bucket: "${S3_BUCKET:-mcp-dev-contexts}"
    force_path_style: false  # Use virtual-hosted-style for real S3
    disable_ssl: false  # Use SSL for real S3
    
    # AWS credentials (from environment or IAM role)
    access_key_id: "${AWS_ACCESS_KEY_ID:-}"
    secret_access_key: "${AWS_SECRET_ACCESS_KEY:-}"
    session_token: "${AWS_SESSION_TOKEN:-}"  # For temporary credentials

# Adapters - Development settings
adapters:
  github:
    token: "${GITHUB_TOKEN:-mock-token}"
    base_url: "${GITHUB_API_URL:-https://api.github.com}"
    webhook_secret: "dev-webhook-secret"
    
    # Use mock server in dev
    mock:
      enabled: ${USE_MOCK_GITHUB:-true}
      url: "http://localhost:8081/mock-github"
      
  # Other adapters with dev settings
  sonarqube:
    base_url: "${SONARQUBE_URL:-http://localhost:9000}"
    token: "${SONARQUBE_TOKEN:-mock-token}"

# Development-specific features
dev:
  # Hot reload
  hot_reload:
    enabled: true
    watch_paths:
      - "./configs"
      - "./internal"
      
  # Seed data
  seed_data:
    enabled: true
    file: "./test/fixtures/seed_data.yaml"
    
  # Debug endpoints
  debug_endpoints:
    enabled: true
    path_prefix: "/__debug"
    
  # Request/Response logging
  http_logging:
    enabled: true
    log_headers: true
    log_body: true
    max_body_log_size: 1024

# Feature flags - Enable experimental features in dev
features:
  experimental_tools: true
  debug_mode: true
  mock_external_services: true

# Embedding Configuration - Development
embedding:
  # Enable at least one provider for development
  providers:
    # OpenAI Provider - Primary for development
    openai:
      enabled: ${OPENAI_ENABLED:-false}
      api_key: "${OPENAI_API_KEY}"
      
    # AWS Bedrock Provider - Real AWS
    bedrock:
      enabled: ${BEDROCK_ENABLED:-true}  # Enable by default for AWS development
      region: "${AWS_REGION:-us-east-1}"
      # Empty endpoint to use real AWS Bedrock
      endpoint: "${BEDROCK_ENDPOINT:-}"
      
      # AWS credentials (from environment or IAM role)
      access_key_id: "${AWS_ACCESS_KEY_ID:-}"
      secret_access_key: "${AWS_SECRET_ACCESS_KEY:-}"
      session_token: "${AWS_SESSION_TOKEN:-}"  # For temporary credentials
      
    # Google AI Provider
    google:
      enabled: ${GOOGLE_AI_ENABLED:-false}
      api_key: "${GOOGLE_AI_API_KEY}"
  
  # Development-friendly defaults
  default_agent_config:
    embedding_strategy: "speed"  # Prioritize speed in dev
    model_preferences:
      primary_models:
        - "text-embedding-3-small"  # Cheaper and faster for dev
      fallback_models:
        - "text-embedding-ada-002"
    constraints:
      max_tokens_per_request: 8000
      max_cost_per_day: 1.0  # Lower cost limit for dev
      preferred_dimensions: 1536
      allow_dimension_reduction: true
  
  # More forgiving circuit breaker in dev
  circuit_breaker:
    failure_threshold: 10
    success_threshold: 1
    timeout: "60s"
    
  # Simpler routing in dev
  router:
    selection_strategy: "round_robin"  # Simple strategy for dev
    cache_ttl: "1m"  # Shorter cache in dev

# Worker Configuration - Redis Streams
worker:
  queue_type: redis  # Always use Redis
  concurrency: ${WORKER_CONCURRENCY:-10}
  
  # Redis Streams configuration
  redis:
    stream_name: "${REDIS_STREAM_NAME:-webhook-events}"
    consumer_group: "${REDIS_CONSUMER_GROUP:-webhook-processors}"
    
    # Redis settings
    block_timeout: 5s  # Block duration for XREAD
    batch_size: 100    # Max messages per batch
    prefetch_count: 1000  # Prefetch for better throughput
    
  # Memory queue for local testing without AWS
  memory:
    enabled: ${MEMORY_QUEUE_ENABLED:-false}
    buffer_size: 1000

# AWS Configuration - Common settings for all AWS services
aws:
  region: "${AWS_REGION:-us-east-1}"
  
  # Credentials (optional - can use IAM role or environment)
  credentials:
    access_key_id: "${AWS_ACCESS_KEY_ID:-}"
    secret_access_key: "${AWS_SECRET_ACCESS_KEY:-}"
    session_token: "${AWS_SESSION_TOKEN:-}"
    
  # Service endpoints (empty for real AWS)
  endpoints:
    s3: "${S3_ENDPOINT:-}"
    bedrock: "${BEDROCK_ENDPOINT:-}"
    
  # ElastiCache specific configuration
  elasticache:
    endpoint: "${ELASTICACHE_ENDPOINT:-sean-mcp-test-qem3fz.serverless.use1.cache.amazonaws.com:6379}"
    auth_token: "${ELASTICACHE_AUTH_TOKEN:-}"
    tls:
      enabled: true
      min_version: "1.3"
      insecure_skip_verify: true  # For SSH tunnel in dev