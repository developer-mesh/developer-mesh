./test/integration/ide_agent_github_test.go:	"github.com/gorilla/websocket"
./test/integration/ide_agent_github_test.go:	wsURL := getTestWebSocketURL()
./test/integration/ide_agent_github_test.go:	// Set up WebSocket connection
./test/integration/ide_agent_github_test.go:	dialer := websocket.Dialer{
./test/integration/ide_agent_github_test.go:	require.NoError(t, err, "Failed to connect to WebSocket")
./test/integration/ide_agent_github_test.go:	wsURL := getTestWebSocketURL()
./test/integration/ide_agent_github_test.go:		// Send via WebSocket for real-time processing
./test/integration/ide_agent_github_test.go:		dialer := websocket.Dialer{
./test/integration/ide_agent_github_test.go:func getTestWebSocketURL() string {
./test/integration/ide_agent_github_test.go:	return "ws://localhost:8080/ws"
./test/integration/websocket_integration_test.go:	"github.com/coder/websocket"
./test/integration/websocket_integration_test.go:	"github.com/coder/websocket/wsjson"
./test/integration/websocket_integration_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/integration/websocket_integration_test.go:// TestWebSocketMCPIntegration tests WebSocket integration with MCP server components
./test/integration/websocket_integration_test.go:func TestWebSocketMCPIntegration(t *testing.T) {
./test/integration/websocket_integration_test.go:	wsURL := strings.Replace(baseURL, "http://", "ws://", 1)
./test/integration/websocket_integration_test.go:	wsURL = strings.Replace(wsURL, "https://", "wss://", 1)
./test/integration/websocket_integration_test.go:	t.Run("WebSocket_Context_Integration", func(t *testing.T) {
./test/integration/websocket_integration_test.go:		// Connect via WebSocket
./test/integration/websocket_integration_test.go:		opts := &websocket.DialOptions{
./test/integration/websocket_integration_test.go:		conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/integration/websocket_integration_test.go:			if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/integration/websocket_integration_test.go:		// Create context via WebSocket
./test/integration/websocket_integration_test.go:					"source": "websocket",
./test/integration/websocket_integration_test.go:		// Update context via WebSocket
./test/integration/websocket_integration_test.go:					"source":  "websocket",
./test/integration/websocket_integration_test.go:	t.Run("WebSocket_Tool_Integration", func(t *testing.T) {
./test/integration/websocket_integration_test.go:		// Connect via WebSocket
./test/integration/websocket_integration_test.go:		opts := &websocket.DialOptions{
./test/integration/websocket_integration_test.go:		conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/integration/websocket_integration_test.go:			if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/integration/websocket_integration_test.go:				// Tool execution might fail, but WebSocket should handle it gracefully
./test/integration/websocket_integration_test.go:	t.Run("WebSocket_Event_Subscription", func(t *testing.T) {
./test/integration/websocket_integration_test.go:		opts := &websocket.DialOptions{
./test/integration/websocket_integration_test.go:		conn1, _, err := websocket.Dial(ctx, wsURL, opts)
./test/integration/websocket_integration_test.go:			if err := conn1.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/integration/websocket_integration_test.go:		conn2, _, err := websocket.Dial(ctx, wsURL, opts)
./test/integration/websocket_integration_test.go:			if err := conn2.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/integration/websocket_integration_test.go:// TestWebSocketPerformanceMetrics tests WebSocket performance metrics collection
./test/integration/websocket_integration_test.go:func TestWebSocketPerformanceMetrics(t *testing.T) {
./test/integration/websocket_integration_test.go:	// Check WebSocket metrics endpoint
./test/integration/websocket_integration_test.go:	resp, err := http.Get(baseURL + "/api/v1/websocket/metrics")
./test/integration/websocket_integration_test.go:		t.Skip("WebSocket metrics endpoint not available")
./test/integration/websocket_integration_test.go:		t.Skip("WebSocket metrics endpoint requires authentication")
./test/integration/websocket_integration_test.go:// BenchmarkWebSocketThroughput benchmarks WebSocket message throughput
./test/integration/websocket_integration_test.go:func BenchmarkWebSocketThroughput(b *testing.B) {
./test/integration/websocket_integration_test.go:	wsURL := strings.Replace(baseURL, "http://", "ws://", 1)
./test/integration/websocket_integration_test.go:	wsURL = strings.Replace(wsURL, "https://", "wss://", 1)
./test/integration/websocket_integration_test.go:	opts := &websocket.DialOptions{
./test/integration/websocket_integration_test.go:	conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/integration/websocket_integration_test.go:		b.Skip("Cannot connect to WebSocket server")
./test/integration/websocket_integration_test.go:		if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/e2e/embedding_e2e_test.go:	"github.com/gorilla/websocket"
./test/e2e/embedding_e2e_test.go:// EmbeddingE2ESuite tests the complete embedding flow from API to WebSocket
./test/e2e/embedding_e2e_test.go:	wsConn       *websocket.Conn
./test/e2e/embedding_e2e_test.go:		s.wsBaseURL = "ws://localhost:8080/ws"
./test/e2e/embedding_e2e_test.go:	// Step 3: Connect via WebSocket
./test/e2e/embedding_e2e_test.go:	s.T().Log("Step 3: Establishing WebSocket connection")
./test/e2e/embedding_e2e_test.go:	s.connectWebSocket()
./test/e2e/embedding_e2e_test.go:	// Step 4: Register agent via WebSocket
./test/e2e/embedding_e2e_test.go:	// Step 5: Generate embedding via WebSocket
./test/e2e/embedding_e2e_test.go:	s.connectWebSocket()
./test/e2e/embedding_e2e_test.go:	s.connectWebSocket()
./test/e2e/embedding_e2e_test.go:func (s *EmbeddingE2ESuite) connectWebSocket() {
./test/e2e/embedding_e2e_test.go:	s.wsConn, _, err = websocket.DefaultDialer.Dial(s.wsBaseURL, header)
./test/e2e/connection/connection.go:	"github.com/coder/websocket"
./test/e2e/connection/connection.go:	"github.com/coder/websocket/wsjson"
./test/e2e/connection/connection.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/e2e/connection/connection.go:// ConnectionManager manages WebSocket connections
./test/e2e/connection/connection.go:// EstablishConnection creates a new WebSocket connection
./test/e2e/connection/connection.go:func (cm *ConnectionManager) EstablishConnection(ctx context.Context) (*websocket.Conn, error) {
./test/e2e/connection/connection.go:	wsURL, err := cm.buildWebSocketURL()
./test/e2e/connection/connection.go:	var conn *websocket.Conn
./test/e2e/connection/connection.go:		conn, _, lastErr = websocket.Dial(dialCtx, wsURL, opts)
./test/e2e/connection/connection.go:// buildWebSocketURL constructs the WebSocket URL
./test/e2e/connection/connection.go:func (cm *ConnectionManager) buildWebSocketURL() (string, error) {
./test/e2e/connection/connection.go:		// Already WebSocket URL
./test/e2e/connection/connection.go:// buildDialOptions constructs WebSocket dial options
./test/e2e/connection/connection.go:func (cm *ConnectionManager) buildDialOptions() *websocket.DialOptions {
./test/e2e/connection/connection.go:	opts := &websocket.DialOptions{
./test/e2e/connection/connection.go:		opts.CompressionMode = websocket.CompressionContextTakeover
./test/e2e/connection/connection.go:// ConnectionHelper provides utility functions for WebSocket connections
./test/e2e/connection/connection.go:	conn *websocket.Conn
./test/e2e/connection/connection.go:func NewConnectionHelper(conn *websocket.Conn) *ConnectionHelper {
./test/e2e/connection/connection.go:	return ch.conn.Write(ctx, websocket.MessageBinary, data)
./test/e2e/connection/connection.go:	if msgType != websocket.MessageBinary {
./test/e2e/connection/connection.go:	return ch.conn.Close(websocket.StatusNormalClosure, reason)
./test/e2e/connection/connection.go:// ConnectionPool manages a pool of WebSocket connections
./test/e2e/connection/connection.go:	connections []*websocket.Conn
./test/e2e/connection/connection.go:		connections: make([]*websocket.Conn, 0, maxSize),
./test/e2e/connection/connection.go:func (cp *ConnectionPool) Get(ctx context.Context) (*websocket.Conn, error) {
./test/e2e/connection/connection.go:		_ = conn.Close(websocket.StatusGoingAway, "connection dead")
./test/e2e/connection/connection.go:func (cp *ConnectionPool) Put(conn *websocket.Conn) {
./test/e2e/connection/connection.go:		_ = conn.Close(websocket.StatusNormalClosure, "pool full")
./test/e2e/connection/connection.go:		_ = conn.Close(websocket.StatusNormalClosure, "pool closing")
./test/e2e/connection/connection.go:		_ = conn.Close(websocket.StatusNormalClosure, "test complete")
./test/e2e/agent/specialized_agents.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/e2e/agent/agent.go:	"github.com/coder/websocket"
./test/e2e/agent/agent.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/e2e/agent/agent.go:	conn         *websocket.Conn
./test/e2e/agent/agent.go:// Connect establishes WebSocket connection to the MCP server
./test/e2e/agent/agent.go:	// Parse base URL and construct WebSocket URL
./test/e2e/agent/agent.go:	wsURL := strings.Replace(baseURL, "https://", "wss://", 1)
./test/e2e/agent/agent.go:	wsURL = strings.Replace(wsURL, "http://", "ws://", 1)
./test/e2e/agent/agent.go:	opts := &websocket.DialOptions{
./test/e2e/agent/agent.go:	conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/e2e/agent/agent.go:// readMessages continuously reads messages from the WebSocket
./test/e2e/agent/agent.go:				case websocket.MessageBinary:
./test/e2e/agent/agent.go:				case websocket.MessageText:
./test/e2e/agent/agent.go:				if websocket.CloseStatus(err) != -1 {
./test/e2e/agent/agent.go:// SendMessage sends a message through the WebSocket
./test/e2e/agent/agent.go:		if err := ta.conn.Write(ctx, websocket.MessageBinary, data); err != nil {
./test/e2e/agent/agent.go:		if err := ta.conn.Write(ctx, websocket.MessageText, data); err != nil {
./test/e2e/agent/agent.go:		_ = ta.conn.Write(ctx, websocket.MessageText, data)
./test/e2e/agent/agent.go:		err := ta.conn.Close(websocket.StatusNormalClosure, "Test completed")
./test/e2e/validate_connection.go:	// Test WebSocket endpoint (just check if it responds)
./test/e2e/validate_connection.go:	fmt.Println("\nTesting WebSocket Endpoint...")
./test/e2e/validate_connection.go:	if !testWebSocketEndpoint(wsURL, apiKey) {
./test/e2e/validate_connection.go:		fmt.Printf("❌ WebSocket endpoint check failed at %s\n", wsURL)
./test/e2e/validate_connection.go:		fmt.Printf("✅ WebSocket endpoint is accessible at %s\n", wsURL)
./test/e2e/validate_connection.go:func testWebSocketEndpoint(url, apiKey string) bool {
./test/e2e/validate_connection.go:	// For WebSocket, we just test if the endpoint exists
./test/e2e/validate_connection.go:	// A proper WebSocket test would require upgrading the connection
./test/e2e/validate_connection.go:	req.Header.Set("Upgrade", "websocket")
./test/e2e/validate_connection.go:	req.Header.Set("Sec-WebSocket-Version", "13")
./test/e2e/validate_connection.go:	req.Header.Set("Sec-WebSocket-Key", "dGVzdCBrZXkgZm9yIHZhbGlkYXRpb24=")
./test/e2e/validate_connection.go:	req.Header.Set("Sec-WebSocket-Protocol", "mcp.v1")
./test/e2e/scenarios/single_agent_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/websocket/websocket_suite_test.go:package websocket_test
./test/functional/websocket/websocket_suite_test.go:	"github.com/coder/websocket"
./test/functional/websocket/websocket_suite_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/websocket/websocket_suite_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/websocket/websocket_suite_test.go:func TestWebSocket(t *testing.T) {
./test/functional/websocket/websocket_suite_test.go:	RunSpecs(t, "WebSocket Suite")
./test/functional/websocket/websocket_suite_test.go:	wsURL = config.WebSocketURL
./test/functional/websocket/websocket_suite_test.go:	// Verify WebSocket endpoint health (following CLAUDE.md patterns)
./test/functional/websocket/websocket_suite_test.go:	healthURL := strings.Replace(wsURL, "ws://", "http://", 1)
./test/functional/websocket/websocket_suite_test.go:var _ = Describe("WebSocket Connection", func() {
./test/functional/websocket/websocket_suite_test.go:		conn   *websocket.Conn
./test/functional/websocket/websocket_suite_test.go:			if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/websocket/websocket_suite_test.go:			conn, _, err = websocket.Dial(ctx, wsURL, &websocket.DialOptions{
./test/functional/websocket/websocket_suite_test.go:			_, _, err := websocket.Dial(ctx, wsURL, nil)
./test/functional/websocket/websocket_suite_test.go:			_, _, err := websocket.Dial(ctx, wsURL, &websocket.DialOptions{
./test/functional/websocket/websocket_suite_test.go:			conn1, _, err := websocket.Dial(ctx, wsURL, &websocket.DialOptions{
./test/functional/websocket/websocket_suite_test.go:				if err := conn1.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/websocket/websocket_suite_test.go:			conn2, _, err := websocket.Dial(ctx, wsURL, &websocket.DialOptions{
./test/functional/websocket/websocket_suite_test.go:				if err := conn2.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/mcp/mcp_server_comprehensive_test.go:	"github.com/coder/websocket"
./test/functional/mcp/mcp_server_comprehensive_test.go:var _ = Describe("MCP Server Comprehensive WebSocket Tests", func() {
./test/functional/mcp/mcp_server_comprehensive_test.go:		// Convert HTTP URL to WebSocket URL
./test/functional/mcp/mcp_server_comprehensive_test.go:			wsURL = strings.Replace(baseURL, "http://", "ws://", 1)
./test/functional/mcp/mcp_server_comprehensive_test.go:			wsURL = strings.Replace(baseURL, "https://", "wss://", 1)
./test/functional/mcp/mcp_server_comprehensive_test.go:			wsURL = "ws://localhost:8080"
./test/functional/mcp/mcp_server_comprehensive_test.go:	Describe("WebSocket Connection Tests", func() {
./test/functional/mcp/mcp_server_comprehensive_test.go:		It("should establish a WebSocket connection with authentication", func() {
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:				Skip("WebSocket server not available")
./test/functional/mcp/mcp_server_comprehensive_test.go:			err = conn.WriteMessage(websocket.PingMessage, []byte("ping"))
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:		var conn *websocket.Conn
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:				Skip("WebSocket server not available")
./test/functional/mcp/mcp_server_comprehensive_test.go:		var conn *websocket.Conn
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:				Skip("WebSocket server not available")
./test/functional/mcp/mcp_server_comprehensive_test.go:		var conn *websocket.Conn
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:				Skip("WebSocket server not available")
./test/functional/mcp/mcp_server_comprehensive_test.go:		var conn *websocket.Conn
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:				Skip("WebSocket server not available")
./test/functional/mcp/mcp_server_comprehensive_test.go:						if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
./test/functional/mcp/mcp_server_comprehensive_test.go:		var conn *websocket.Conn
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:				Skip("WebSocket server not available")
./test/functional/mcp/mcp_server_comprehensive_test.go:			err := conn.WriteMessage(websocket.TextMessage, []byte("invalid json"))
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:				Skip("WebSocket server not available")
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:				Skip("WebSocket server not available")
./test/functional/mcp/mcp_server_comprehensive_test.go:		var conn *websocket.Conn
./test/functional/mcp/mcp_server_comprehensive_test.go:			dialer := websocket.Dialer{
./test/functional/mcp/mcp_server_comprehensive_test.go:				Skip("WebSocket server not available")
./test/functional/shared/config.go:	WebSocketURL  string
./test/functional/shared/config.go:		WebSocketURL:  getEnvOrDefault("MCP_WEBSOCKET_URL", "ws://localhost:8080/ws"),
./test/functional/shared/config.go:		"websocket_url": config.WebSocketURL,
./test/functional/shared/websocket_test_helpers.go:	"github.com/coder/websocket"
./test/functional/shared/websocket_test_helpers.go:	"github.com/coder/websocket/wsjson"
./test/functional/shared/websocket_test_helpers.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/shared/websocket_test_helpers.go:	conn           *websocket.Conn
./test/functional/shared/websocket_test_helpers.go:	opts := &websocket.DialOptions{
./test/functional/shared/websocket_test_helpers.go:	conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/shared/websocket_test_helpers.go:	return c.conn.Close(websocket.StatusNormalClosure, "")
./test/functional/shared/websocket_test_helpers.go:	conn  *websocket.Conn
./test/functional/shared/websocket_test_helpers.go:func NewWorkflowOrchestrator(conn *websocket.Conn) *WorkflowOrchestrator {
./test/functional/shared/websocket_test_helpers.go:	conn          *websocket.Conn
./test/functional/shared/websocket_test_helpers.go:func NewSubscriptionManager(conn *websocket.Conn) *SubscriptionManager {
./test/functional/shared/websocket_test_helpers.go:	Conn         *websocket.Conn
./test/functional/shared/websocket_test_helpers.go:// EstablishConnection creates an authenticated WebSocket connection
./test/functional/shared/websocket_test_helpers.go:func EstablishConnection(wsURL, apiKey string) (*websocket.Conn, error) {
./test/functional/shared/websocket_test_helpers.go:	opts := &websocket.DialOptions{
./test/functional/shared/websocket_test_helpers.go:	conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/shared/websocket_test_helpers.go:		_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/shared/websocket_test_helpers.go:		_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/shared/websocket_test_helpers.go:		_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/api/websocket_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/api/websocket_test.go:var _ = Describe("WebSocket API Functional Tests", func() {
./test/functional/api/websocket_test.go:		// Convert HTTP URL to WebSocket URL
./test/functional/api/websocket_test.go:		wsURL = strings.Replace(baseURL, "http://", "ws://", 1)
./test/functional/api/websocket_test.go:		wsURL = strings.Replace(wsURL, "https://", "wss://", 1)
./test/functional/api/websocket_test.go:		GinkgoWriter.Printf("WebSocket URL: %s\n", wsURL)
./test/functional/api/websocket_test.go:			opts := &websocket.DialOptions{
./test/functional/api/websocket_test.go:			conn, resp, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/api/websocket_test.go:				if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/api/websocket_test.go:			_, resp, err := websocket.Dial(ctx, wsURL, nil)
./test/functional/api/websocket_test.go:			opts := &websocket.DialOptions{
./test/functional/api/websocket_test.go:			_, resp, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/api/websocket_test.go:			connections := make([]*websocket.Conn, numConnections)
./test/functional/api/websocket_test.go:					opts := &websocket.DialOptions{
./test/functional/api/websocket_test.go:					conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/api/websocket_test.go:					if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/api/websocket_test.go:		var conn *websocket.Conn
./test/functional/api/websocket_test.go:			opts := &websocket.DialOptions{
./test/functional/api/websocket_test.go:			conn, _, err = websocket.Dial(ctx, wsURL, opts)
./test/functional/api/websocket_test.go:				if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/api/websocket_test.go:			err := conn.Write(ctx, websocket.MessageText, malformed)
./test/functional/api/websocket_test.go:			opts := &websocket.DialOptions{
./test/functional/api/websocket_test.go:			conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/api/websocket_test.go:				if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/api/websocket_test.go:		It("should provide WebSocket statistics", func() {
./test/functional/api/websocket_test.go:			resp, err := httpClient.Get(baseURL + "/api/v1/websocket/stats")
./test/functional/api/websocket_test.go:			resp, err := httpClient.Get(baseURL + "/api/v1/websocket/health")
./test/functional/api/websocket_subscription_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_subscription_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/api/websocket_subscription_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/api/websocket_subscription_test.go:var _ = Describe("WebSocket Real-Time Subscriptions", func() {
./test/functional/api/websocket_subscription_test.go:		conn   *websocket.Conn
./test/functional/api/websocket_subscription_test.go:		wsURL = config.WebSocketURL
./test/functional/api/websocket_subscription_test.go:			_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_subscription_test.go:				_ = conn2.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_subscription_test.go:			_ = conn.Close(websocket.StatusGoingAway, "simulating disconnect")
./test/functional/api/websocket_subscription_test.go:				_ = newConn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_performance_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_performance_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/api/websocket_performance_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/api/websocket_performance_test.go:var _ = Describe("WebSocket Performance Tests", func() {
./test/functional/api/websocket_performance_test.go:		// Convert HTTP URL to WebSocket URL
./test/functional/api/websocket_performance_test.go:		wsURL = strings.Replace(baseURL, "http://", "ws://", 1)
./test/functional/api/websocket_performance_test.go:		wsURL = strings.Replace(wsURL, "https://", "wss://", 1)
./test/functional/api/websocket_performance_test.go:			opts := &websocket.DialOptions{
./test/functional/api/websocket_performance_test.go:			conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/api/websocket_performance_test.go:				if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/api/websocket_performance_test.go:						if websocket.CloseStatus(err) != -1 {
./test/functional/api/websocket_performance_test.go:					opts := &websocket.DialOptions{
./test/functional/api/websocket_performance_test.go:					conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/api/websocket_performance_test.go:						if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/api/websocket_performance_test.go:			opts := &websocket.DialOptions{
./test/functional/api/websocket_performance_test.go:			conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/api/websocket_performance_test.go:				if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./test/functional/api/websocket_context_window_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_context_window_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/api/websocket_context_window_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/api/websocket_context_window_test.go:var _ = Describe("WebSocket Context Window Management", func() {
./test/functional/api/websocket_context_window_test.go:		conn   *websocket.Conn
./test/functional/api/websocket_context_window_test.go:		wsURL = config.WebSocketURL
./test/functional/api/websocket_context_window_test.go:			_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_session_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_session_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/api/websocket_session_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/api/websocket_session_test.go:var _ = Describe("WebSocket Session Management", func() {
./test/functional/api/websocket_session_test.go:		conn   *websocket.Conn
./test/functional/api/websocket_session_test.go:		wsURL = config.WebSocketURL
./test/functional/api/websocket_session_test.go:			_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_session_test.go:			_ = conn.Close(websocket.StatusGoingAway, "simulating disconnect")
./test/functional/api/websocket_session_test.go:				_ = newConn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_binary_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_binary_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/api/websocket_binary_test.go:var _ = Describe("WebSocket Binary Protocol", func() {
./test/functional/api/websocket_binary_test.go:		conn   *websocket.Conn
./test/functional/api/websocket_binary_test.go:		wsURL = config.WebSocketURL
./test/functional/api/websocket_binary_test.go:		err = conn.Write(ctx, websocket.MessageText, msgBytes)
./test/functional/api/websocket_binary_test.go:			_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_binary_test.go:			err = conn.Write(ctx, websocket.MessageBinary, binaryMsg)
./test/functional/api/websocket_binary_test.go:			Expect(msgType).To(Equal(websocket.MessageBinary))
./test/functional/api/websocket_binary_test.go:			err = conn.Write(ctx, websocket.MessageText, textBytes)
./test/functional/api/websocket_binary_test.go:			if msgType == websocket.MessageBinary {
./test/functional/api/websocket_binary_test.go:			err = conn.Write(ctx, websocket.MessageBinary, binaryBytes)
./test/functional/api/websocket_binary_test.go:			Expect(msgType2).To(Equal(websocket.MessageBinary))
./test/functional/api/websocket_binary_test.go:			err = conn.Write(ctx, websocket.MessageBinary, binaryMsg)
./test/functional/api/websocket_binary_test.go:				err = conn.Write(ctx, websocket.MessageBinary, binaryMsg)
./test/functional/api/websocket_binary_test.go:			err = conn.Write(ctx, websocket.MessageBinary, binaryMsg)
./test/functional/api/websocket_binary_test.go:				Expect(msgType).To(Equal(websocket.MessageBinary))
./test/functional/api/websocket_binary_test.go:			err := conn.Write(ctx, websocket.MessageBinary, malformedData)
./test/functional/api/websocket_binary_test.go:			err = conn.Write(ctx, websocket.MessageText, jsonBytes)
./test/functional/api/websocket_binary_test.go:			Expect(msgType).To(Equal(websocket.MessageText))
./test/functional/api/tls_test.go:				tlsWSURL = "wss://localhost:8443/ws"
./test/functional/api/websocket_workflow_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_workflow_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/api/websocket_workflow_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/api/websocket_workflow_test.go:var _ = Describe("WebSocket Multi-Step Workflows", func() {
./test/functional/api/websocket_workflow_test.go:		conn   *websocket.Conn
./test/functional/api/websocket_workflow_test.go:		wsURL = config.WebSocketURL
./test/functional/api/websocket_workflow_test.go:			_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_collaboration_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_collaboration_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/api/websocket_collaboration_test.go:// WebSocketClient is a test client wrapper
./test/functional/api/websocket_collaboration_test.go:type WebSocketClient struct {
./test/functional/api/websocket_collaboration_test.go:	Conn    *websocket.Conn
./test/functional/api/websocket_collaboration_test.go:// WebSocketMessage represents a message for testing
./test/functional/api/websocket_collaboration_test.go:type WebSocketMessage struct {
./test/functional/api/websocket_collaboration_test.go:	Error  *WebSocketError        `json:"error,omitempty"`
./test/functional/api/websocket_collaboration_test.go:// WebSocketError represents an error in a WebSocket message
./test/functional/api/websocket_collaboration_test.go:type WebSocketError struct {
./test/functional/api/websocket_collaboration_test.go:// NewWebSocketClient creates a new test WebSocket client
./test/functional/api/websocket_collaboration_test.go:func NewWebSocketClient(t *testing.T, agentID string, capabilities []string) *WebSocketClient {
./test/functional/api/websocket_collaboration_test.go:	// Establish WebSocket connection
./test/functional/api/websocket_collaboration_test.go:	conn, err := establishWebSocketConnection(t, config.WebSocketURL, apiKey, agentID, capabilities)
./test/functional/api/websocket_collaboration_test.go:	require.NoError(t, err, "Failed to establish WebSocket connection for agent %s", agentID)
./test/functional/api/websocket_collaboration_test.go:	return &WebSocketClient{
./test/functional/api/websocket_collaboration_test.go:// SendMessage sends a message through the WebSocket
./test/functional/api/websocket_collaboration_test.go:func (c *WebSocketClient) SendMessage(msg WebSocketMessage) error {
./test/functional/api/websocket_collaboration_test.go:// ReadMessage reads a message from the WebSocket
./test/functional/api/websocket_collaboration_test.go:func (c *WebSocketClient) ReadMessage(ctx context.Context) (*WebSocketMessage, error) {
./test/functional/api/websocket_collaboration_test.go:	var msg WebSocketMessage
./test/functional/api/websocket_collaboration_test.go:// Close closes the WebSocket connection
./test/functional/api/websocket_collaboration_test.go:func (c *WebSocketClient) Close() error {
./test/functional/api/websocket_collaboration_test.go:		return c.Conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_collaboration_test.go:func TestWebSocketTaskDelegation(t *testing.T) {
./test/functional/api/websocket_collaboration_test.go:	agent1 := NewWebSocketClient(t, "agent1", []string{"coding", "testing"})
./test/functional/api/websocket_collaboration_test.go:	agent2 := NewWebSocketClient(t, "agent2", []string{"documentation", "testing"})
./test/functional/api/websocket_collaboration_test.go:	createTaskMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:		delegateMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:	acceptMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:func TestWebSocketWorkflowCoordination(t *testing.T) {
./test/functional/api/websocket_collaboration_test.go:	coder := NewWebSocketClient(t, "coder", []string{"coding", "debugging"})
./test/functional/api/websocket_collaboration_test.go:	tester := NewWebSocketClient(t, "tester", []string{"testing", "qa"})
./test/functional/api/websocket_collaboration_test.go:	reviewer := NewWebSocketClient(t, "reviewer", []string{"review", "documentation"})
./test/functional/api/websocket_collaboration_test.go:	createWorkflowMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:	executeMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:	agents := []*WebSocketClient{coder, tester, reviewer}
./test/functional/api/websocket_collaboration_test.go:		completeMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:	statusMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:func TestWebSocketWorkspaceCollaboration(t *testing.T) {
./test/functional/api/websocket_collaboration_test.go:	agents := make([]*WebSocketClient, numAgents)
./test/functional/api/websocket_collaboration_test.go:		agents[i] = NewWebSocketClient(t, fmt.Sprintf("agent%d", i+1), []string{"collaboration"})
./test/functional/api/websocket_collaboration_test.go:	createWorkspaceMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:		joinMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:	createDocMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:			editMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:func TestWebSocketConflictResolution(t *testing.T) {
./test/functional/api/websocket_collaboration_test.go:	agent1 := NewWebSocketClient(t, "agent1", []string{"editing"})
./test/functional/api/websocket_collaboration_test.go:	agent2 := NewWebSocketClient(t, "agent2", []string{"editing"})
./test/functional/api/websocket_collaboration_test.go:	createStateMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:	subscribeMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:			incrementMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:			incrementMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:	queryMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:func TestWebSocketCapabilityMatching(t *testing.T) {
./test/functional/api/websocket_collaboration_test.go:	agents := []*WebSocketClient{
./test/functional/api/websocket_collaboration_test.go:		NewWebSocketClient(t, "frontend-dev", []string{"javascript", "react", "css"}),
./test/functional/api/websocket_collaboration_test.go:		NewWebSocketClient(t, "backend-dev", []string{"golang", "postgresql", "redis"}),
./test/functional/api/websocket_collaboration_test.go:		NewWebSocketClient(t, "ml-engineer", []string{"python", "tensorflow", "data-analysis"}),
./test/functional/api/websocket_collaboration_test.go:		NewWebSocketClient(t, "devops", []string{"kubernetes", "terraform", "monitoring"}),
./test/functional/api/websocket_collaboration_test.go:		defer func(a *WebSocketClient) {
./test/functional/api/websocket_collaboration_test.go:		createMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:		var resp *WebSocketMessage
./test/functional/api/websocket_collaboration_test.go:func TestWebSocketMultiAgentPerformance(t *testing.T) {
./test/functional/api/websocket_collaboration_test.go:	agents := make([]*WebSocketClient, numAgents)
./test/functional/api/websocket_collaboration_test.go:		agents[i] = NewWebSocketClient(t, fmt.Sprintf("perf-agent-%d", i), []string{"processing"})
./test/functional/api/websocket_collaboration_test.go:	createWorkspaceMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:			joinMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:				createTaskMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:				completeMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:	WebSocketURL string
./test/functional/api/websocket_collaboration_test.go:		wsURL = "ws://localhost:8080/ws"
./test/functional/api/websocket_collaboration_test.go:		WebSocketURL string
./test/functional/api/websocket_collaboration_test.go:		WebSocketURL: wsURL,
./test/functional/api/websocket_collaboration_test.go:// establishWebSocketConnection creates an authenticated WebSocket connection
./test/functional/api/websocket_collaboration_test.go:func establishWebSocketConnection(t *testing.T, wsURL, apiKey, agentID string, capabilities []string) (*websocket.Conn, error) {
./test/functional/api/websocket_collaboration_test.go:	opts := &websocket.DialOptions{
./test/functional/api/websocket_collaboration_test.go:	conn, _, err := websocket.Dial(ctx, wsURL, opts)
./test/functional/api/websocket_collaboration_test.go:		return nil, fmt.Errorf("failed to dial WebSocket: %w", err)
./test/functional/api/websocket_collaboration_test.go:	initMsg := WebSocketMessage{
./test/functional/api/websocket_collaboration_test.go:		_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_collaboration_test.go:	var response WebSocketMessage
./test/functional/api/websocket_collaboration_test.go:		_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_collaboration_test.go:		_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_streaming_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_streaming_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/api/websocket_streaming_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/api/websocket_streaming_test.go:var _ = Describe("WebSocket Streaming Operations", func() {
./test/functional/api/websocket_streaming_test.go:		conn   *websocket.Conn
./test/functional/api/websocket_streaming_test.go:		wsURL = config.WebSocketURL
./test/functional/api/websocket_streaming_test.go:			_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_streaming_test.go:						_ = conn.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:	"github.com/coder/websocket"
./test/functional/api/websocket_multi_agent_test.go:	"github.com/coder/websocket/wsjson"
./test/functional/api/websocket_multi_agent_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./test/functional/api/websocket_multi_agent_test.go:var _ = Describe("WebSocket Multi-Agent Collaboration", func() {
./test/functional/api/websocket_multi_agent_test.go:		wsURL = config.WebSocketURL
./test/functional/api/websocket_multi_agent_test.go:				conn         *websocket.Conn
./test/functional/api/websocket_multi_agent_test.go:				defer func(c *websocket.Conn) {
./test/functional/api/websocket_multi_agent_test.go:					_ = c.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:				_ = agent1.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:				_ = agent2.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:			for i, conn := range []*websocket.Conn{agent1, agent2} {
./test/functional/api/websocket_multi_agent_test.go:				_ = coordinator.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:				_ = worker.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:				_ = coordinator.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:			workers := make([]*websocket.Conn, numWorkers)
./test/functional/api/websocket_multi_agent_test.go:				defer func(w *websocket.Conn) {
./test/functional/api/websocket_multi_agent_test.go:					_ = w.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:			agents := make(map[string]*websocket.Conn)
./test/functional/api/websocket_multi_agent_test.go:				defer func(c *websocket.Conn) {
./test/functional/api/websocket_multi_agent_test.go:					_ = c.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:				go func(s string, c *websocket.Conn) {
./test/functional/api/websocket_multi_agent_test.go:				_ = primary.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:				_ = backup.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:			for i, conn := range []*websocket.Conn{primary, backup} {
./test/functional/api/websocket_multi_agent_test.go:				_ = agent1.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:				_ = agent2.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:			for i, conn := range []*websocket.Conn{agent1, agent2} {
./test/functional/api/websocket_multi_agent_test.go:				_ = agent1.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:				_ = agent2.Close(websocket.StatusNormalClosure, "")
./test/functional/api/websocket_multi_agent_test.go:			for i, conn := range []*websocket.Conn{agent1, agent2} {
./test/functional/api/websocket_multi_agent_test.go:				go func(idx int, c *websocket.Conn) {
./examples/ide_agent_github_demo.go:	"github.com/gorilla/websocket"
./examples/ide_agent_github_demo.go:	conn       *websocket.Conn
./examples/ide_agent_github_demo.go:	// Connect to WebSocket with required mcp.v1 subprotocol
./examples/ide_agent_github_demo.go:	dialer := websocket.Dialer{
./examples/ide_agent_github_demo.go:// handleMessages handles incoming WebSocket messages
./examples/ide_agent_github_demo.go:	wsURL := getEnvOrDefault("WS_URL", "ws://localhost:8080/ws")
./apps/mcp-server/cmd/server/main.go:	"github.com/developer-mesh/developer-mesh/apps/mcp-server/internal/api/websocket"
./apps/mcp-server/cmd/server/main.go:	// Inject services into WebSocket server
./apps/mcp-server/cmd/server/main.go:	// Configure WebSocket if available
./apps/mcp-server/cmd/server/main.go:	logger.Info("WebSocket config check", map[string]interface{}{
./apps/mcp-server/cmd/server/main.go:		"websocket_nil":     cfg.WebSocket == nil,
./apps/mcp-server/cmd/server/main.go:		"websocket_enabled": cfg.WebSocket != nil && cfg.WebSocket.Enabled,
./apps/mcp-server/cmd/server/main.go:	if cfg.WebSocket != nil && cfg.WebSocket.Enabled {
./apps/mcp-server/cmd/server/main.go:		apiConfig.WebSocket = parseWebSocketConfig(cfg.WebSocket)
./apps/mcp-server/cmd/server/main.go:		logger.Info("WebSocket config parsed", map[string]interface{}{
./apps/mcp-server/cmd/server/main.go:			"enabled": apiConfig.WebSocket.Enabled,
./apps/mcp-server/cmd/server/main.go:// parseWebSocketConfig parses WebSocket configuration
./apps/mcp-server/cmd/server/main.go:func parseWebSocketConfig(wsConfig *commonconfig.WebSocketConfig) api.WebSocketConfig {
./apps/mcp-server/cmd/server/main.go:	config := api.WebSocketConfig{
./apps/mcp-server/cmd/server/main.go:		config.Security = websocket.SecurityConfig{
./apps/mcp-server/cmd/server/main.go:		config.RateLimit = websocket.RateLimiterConfig{
./apps/mcp-server/internal/api/config.go:	"github.com/developer-mesh/developer-mesh/apps/mcp-server/internal/api/websocket"
./apps/mcp-server/internal/api/config.go:	WebSocket     WebSocketConfig   `mapstructure:"websocket"`
./apps/mcp-server/internal/api/config.go:// WebSocketConfig holds configuration for the WebSocket server
./apps/mcp-server/internal/api/config.go:type WebSocketConfig struct {
./apps/mcp-server/internal/api/config.go:	Security        websocket.SecurityConfig    `mapstructure:"security"`
./apps/mcp-server/internal/api/config.go:	RateLimit       websocket.RateLimiterConfig `mapstructure:"rate_limit"`
./apps/mcp-server/internal/api/config.go:		WebSocket: WebSocketConfig{
./apps/mcp-server/internal/api/config.go:			Security: websocket.SecurityConfig{
./apps/mcp-server/internal/api/config.go:			RateLimit: websocket.RateLimiterConfig{
./apps/mcp-server/internal/api/websocket/collaboration_handlers.go:package websocket
./apps/mcp-server/internal/api/websocket/workflow_engine.go:package websocket
./apps/mcp-server/internal/api/websocket/handlers_extended.go:package websocket
./apps/mcp-server/internal/api/websocket/agent_id_handling_test.go:package websocket
./apps/mcp-server/internal/api/websocket/agent_id_handling_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/agent_id_handling_test.go:			// Simulate the connection initialization logic from HandleWebSocket
./apps/mcp-server/internal/api/websocket/binary_protocol.go:package websocket
./apps/mcp-server/internal/api/websocket/binary_protocol.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/agent_registry.go:package websocket
./apps/mcp-server/internal/api/websocket/server.go:package websocket
./apps/mcp-server/internal/api/websocket/server.go:	"github.com/coder/websocket"
./apps/mcp-server/internal/api/websocket/server.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/server.go:// Connection wraps the WebSocket connection and adds our metadata
./apps/mcp-server/internal/api/websocket/server.go:	conn      *websocket.Conn
./apps/mcp-server/internal/api/websocket/server.go:func (s *Server) HandleWebSocket(w http.ResponseWriter, r *http.Request) {
./apps/mcp-server/internal/api/websocket/server.go:		s.logger.Error("WebSocket authentication failed", map[string]interface{}{
./apps/mcp-server/internal/api/websocket/server.go:	// Accept WebSocket connection
./apps/mcp-server/internal/api/websocket/server.go:	conn, err := websocket.Accept(w, r, &websocket.AcceptOptions{
./apps/mcp-server/internal/api/websocket/server.go:		s.logger.Error("WebSocket accept failed", map[string]interface{}{
./apps/mcp-server/internal/api/websocket/server.go:	s.logger.Debug("WebSocket connection configured", map[string]interface{}{
./apps/mcp-server/internal/api/websocket/server.go:	s.logger.Info("WebSocket connection established", map[string]interface{}{
./apps/mcp-server/internal/api/websocket/server.go:	s.metrics.IncrementCounter("websocket_connections_total", 1)
./apps/mcp-server/internal/api/websocket/server.go:	s.metrics.RecordGauge("websocket_connections_active", float64(len(s.connections)), nil)
./apps/mcp-server/internal/api/websocket/server.go:		s.metrics.RecordGauge("websocket_connections_active", float64(len(s.connections)), nil)
./apps/mcp-server/internal/api/websocket/server.go:		s.logger.Info("WebSocket connection closed", map[string]interface{}{
./apps/mcp-server/internal/api/websocket/server.go:		s.logger.Info("REST API client configured for WebSocket server", nil)
./apps/mcp-server/internal/api/websocket/server.go:	s.logger.Debug("WebSocket auth request headers", map[string]interface{}{
./apps/mcp-server/internal/api/websocket/handlers_agent_migration.go:package websocket
./apps/mcp-server/internal/api/websocket/handlers_agent_migration.go:			"protocol":      "websocket",
./apps/mcp-server/internal/api/websocket/handlers_agent_migration.go:// This is called when a WebSocket connection is closed
./apps/mcp-server/internal/api/websocket/handlers_agent_migration.go:			Message: "WebSocket connection closed",
./apps/mcp-server/internal/api/websocket/metrics.go:package websocket
./apps/mcp-server/internal/api/websocket/metrics.go:// MetricsCollector collects WebSocket metrics
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.IncrementCounter("websocket_connections_total", 1)
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.RecordGauge("websocket_connections_active", float64(mc.activeConnections), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.RecordGauge("websocket_connections_tenant", float64(mc.tenantConnections[tenantID]),
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.RecordGauge("websocket_connections_active", float64(mc.activeConnections), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.RecordHistogram("websocket_connection_duration_seconds", duration.Seconds(), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.IncrementCounter("websocket_connections_failed_total", 1)
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.IncrementCounterWithLabels("websocket_connection_failures", 1,
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.IncrementCounterWithLabels("websocket_messages_total", 1, map[string]string{
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.RecordHistogram("websocket_message_latency_seconds", latencySeconds,
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.IncrementCounter("websocket_batches_sent_total", 1)
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.RecordHistogram("websocket_batch_size", float64(size), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.RecordHistogram("websocket_batch_latency_seconds", latencySeconds, nil)
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.IncrementCounterWithLabels("websocket_protocol_messages_total", 1, map[string]string{
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.IncrementCounterWithLabels("websocket_errors_total", 1,
./apps/mcp-server/internal/api/websocket/metrics.go:		mc.client.IncrementCounterWithLabels("websocket_messages_dropped_total", 1,
./apps/mcp-server/internal/api/websocket/metrics.go:func (mc *MetricsCollector) GetStats() WebSocketStats {
./apps/mcp-server/internal/api/websocket/metrics.go:	stats := WebSocketStats{
./apps/mcp-server/internal/api/websocket/metrics.go:			mc.client.RecordGauge("websocket_stats_total_connections", float64(stats.TotalConnections), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:			mc.client.RecordGauge("websocket_stats_active_connections", float64(stats.ActiveConnections), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:			mc.client.RecordGauge("websocket_stats_messages_received", float64(stats.MessagesReceived), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:			mc.client.RecordGauge("websocket_stats_messages_sent", float64(stats.MessagesSent), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:			mc.client.RecordGauge("websocket_stats_avg_latency_ms", stats.AvgMessageLatency*1000, nil)
./apps/mcp-server/internal/api/websocket/metrics.go:				mc.client.RecordGauge("websocket_protocol_binary_ratio", binaryRatio, nil)
./apps/mcp-server/internal/api/websocket/metrics.go:			mc.client.RecordGauge("websocket_error_rate_auth", float64(stats.AuthErrors), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:			mc.client.RecordGauge("websocket_error_rate_limit", float64(stats.RateLimitErrors), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:			mc.client.RecordGauge("websocket_error_rate_protocol", float64(stats.ProtocolErrors), nil)
./apps/mcp-server/internal/api/websocket/metrics.go:// WebSocketStats contains WebSocket statistics
./apps/mcp-server/internal/api/websocket/metrics.go:type WebSocketStats struct {
./apps/mcp-server/internal/api/websocket/metrics.go:func (mr *MetricsRegistry) GetAllStats() map[string]WebSocketStats {
./apps/mcp-server/internal/api/websocket/metrics.go:	stats := make(map[string]WebSocketStats)
./apps/mcp-server/internal/api/websocket/auth.go:package websocket
./apps/mcp-server/internal/api/websocket/auth.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/auth.go:	MaxFrameSize   int64    // Maximum WebSocket frame size
./apps/mcp-server/internal/api/websocket/server_extensions.go:package websocket
./apps/mcp-server/internal/api/websocket/universal_agent_handlers_extended.go:package websocket
./apps/mcp-server/internal/api/websocket/auth_header_test.go:package websocket
./apps/mcp-server/internal/api/websocket/auth_header_test.go:	// Create WebSocket server
./apps/mcp-server/internal/api/websocket/auth_header_test.go:	// Create WebSocket server without auth service
./apps/mcp-server/internal/api/websocket/auth_header_test.go:// TestAuthConsistencyBetweenRESTAndWebSocket verifies that both REST and WebSocket
./apps/mcp-server/internal/api/websocket/auth_header_test.go:func TestAuthConsistencyBetweenRESTAndWebSocket(t *testing.T) {
./apps/mcp-server/internal/api/websocket/auth_header_test.go:		// Test with WebSocket
./apps/mcp-server/internal/api/websocket/auth_header_test.go:		assert.NoError(t, err, "WebSocket validation failed for header set %d", i)
./apps/mcp-server/internal/api/websocket/auth_header_test.go:		assert.NotNil(t, claims, "WebSocket claims is nil for header set %d", i)
./apps/mcp-server/internal/api/websocket/types.go:package websocket
./apps/mcp-server/internal/api/websocket/noop_span.go:package websocket
./apps/mcp-server/internal/api/websocket/session_manager.go:package websocket
./apps/mcp-server/internal/api/websocket/session_manager.go:// ConversationSessionManager manages WebSocket conversation sessions
./apps/mcp-server/internal/api/websocket/agent_rate_limiter.go:package websocket
./apps/mcp-server/internal/api/websocket/handlers.go:package websocket
./apps/mcp-server/internal/api/websocket/handlers.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/handlers.go:// mapHTTPErrorToWebSocket maps HTTP error codes to WebSocket error codes
./apps/mcp-server/internal/api/websocket/handlers.go:// func mapHTTPErrorToWebSocket(httpError string) (int, string) {
./apps/mcp-server/internal/api/websocket/handlers.go:// processMessage handles incoming WebSocket messages
./apps/mcp-server/internal/api/websocket/batch.go:package websocket
./apps/mcp-server/internal/api/websocket/batch.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/batch.go:		bp.metrics.RecordHistogram("websocket_batch_size", float64(batchSize), nil)
./apps/mcp-server/internal/api/websocket/batch.go:		bp.metrics.RecordHistogram("websocket_batch_latency_seconds", time.Since(start).Seconds(), nil)
./apps/mcp-server/internal/api/websocket/batch.go:		bp.metrics.IncrementCounter("websocket_batches_sent_total", 1)
./apps/mcp-server/internal/api/websocket/connection_test.go:package websocket
./apps/mcp-server/internal/api/websocket/connection_test.go:	"github.com/coder/websocket"
./apps/mcp-server/internal/api/websocket/connection_test.go:	"github.com/coder/websocket/wsjson"
./apps/mcp-server/internal/api/websocket/connection_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/connection_test.go:	// Create test WebSocket server
./apps/mcp-server/internal/api/websocket/connection_test.go:		conn, err := websocket.Accept(w, r, nil)
./apps/mcp-server/internal/api/websocket/connection_test.go:			if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./apps/mcp-server/internal/api/websocket/connection_test.go:		if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./apps/mcp-server/internal/api/websocket/connection_test.go:	conn, _, err := websocket.Dial(ctx, wsURL, nil)
./apps/mcp-server/internal/api/websocket/connection_test.go:		if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./apps/mcp-server/internal/api/websocket/connection_test.go:	// Create test WebSocket server
./apps/mcp-server/internal/api/websocket/connection_test.go:		conn, err := websocket.Accept(w, r, nil)
./apps/mcp-server/internal/api/websocket/connection_test.go:			if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./apps/mcp-server/internal/api/websocket/connection_test.go:	conn, _, err := websocket.Dial(ctx, wsURL, nil)
./apps/mcp-server/internal/api/websocket/connection_test.go:		if err := conn.Close(websocket.StatusNormalClosure, ""); err != nil {
./apps/mcp-server/internal/api/websocket/connection_test.go:		conn, err := websocket.Accept(w, r, nil)
./apps/mcp-server/internal/api/websocket/connection_test.go:	conn, _, err := websocket.Dial(ctx, wsURL, nil)
./apps/mcp-server/internal/api/websocket/inmemory_cache.go:package websocket
./apps/mcp-server/internal/api/websocket/monitoring.go:package websocket
./apps/mcp-server/internal/api/websocket/monitoring.go:	// "github.com/coder/websocket" // Reserved for dashboard WebSocket connections
./apps/mcp-server/internal/api/websocket/monitoring.go:// MonitoringEndpoints provides HTTP endpoints for WebSocket monitoring
./apps/mcp-server/internal/api/websocket/monitoring.go:	monitor := router.Group("/websocket")
./apps/mcp-server/internal/api/websocket/monitoring.go:// handleStats returns WebSocket statistics
./apps/mcp-server/internal/api/websocket/monitoring.go:// handleHealth returns WebSocket server health
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# HELP websocket_connections_total Total number of WebSocket connections",
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# TYPE websocket_connections_total counter",
./apps/mcp-server/internal/api/websocket/monitoring.go:		formatMetric("websocket_connections_total", float64(stats.TotalConnections)),
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# HELP websocket_connections_active Current number of active connections",
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# TYPE websocket_connections_active gauge",
./apps/mcp-server/internal/api/websocket/monitoring.go:		formatMetric("websocket_connections_active", float64(stats.ActiveConnections)),
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# HELP websocket_messages_total Total number of messages",
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# TYPE websocket_messages_total counter",
./apps/mcp-server/internal/api/websocket/monitoring.go:		formatMetric("websocket_messages_total{direction=\"received\"}", float64(stats.MessagesReceived)),
./apps/mcp-server/internal/api/websocket/monitoring.go:		formatMetric("websocket_messages_total{direction=\"sent\"}", float64(stats.MessagesSent)),
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# HELP websocket_message_latency_seconds Message processing latency",
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# TYPE websocket_message_latency_seconds histogram",
./apps/mcp-server/internal/api/websocket/monitoring.go:		formatMetric("websocket_message_latency_seconds", stats.AvgMessageLatency),
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# HELP websocket_errors_total Total number of errors",
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# TYPE websocket_errors_total counter",
./apps/mcp-server/internal/api/websocket/monitoring.go:		formatMetric("websocket_errors_total{type=\"auth\"}", float64(stats.AuthErrors)),
./apps/mcp-server/internal/api/websocket/monitoring.go:		formatMetric("websocket_errors_total{type=\"rate_limit\"}", float64(stats.RateLimitErrors)),
./apps/mcp-server/internal/api/websocket/monitoring.go:		formatMetric("websocket_errors_total{type=\"protocol\"}", float64(stats.ProtocolErrors)),
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# HELP websocket_server_uptime_seconds Server uptime in seconds",
./apps/mcp-server/internal/api/websocket/monitoring.go:		"# TYPE websocket_server_uptime_seconds gauge",
./apps/mcp-server/internal/api/websocket/monitoring.go:		formatMetric("websocket_server_uptime_seconds", time.Since(m.server.startTime).Seconds()),
./apps/mcp-server/internal/api/websocket/monitoring.go:			"# HELP websocket_pool_available Available connections in pool",
./apps/mcp-server/internal/api/websocket/monitoring.go:			"# TYPE websocket_pool_available gauge",
./apps/mcp-server/internal/api/websocket/monitoring.go:			formatMetric("websocket_pool_available", float64(available)),
./apps/mcp-server/internal/api/websocket/monitoring.go:			formatMetric("websocket_pool_size", float64(size)),
./apps/mcp-server/internal/api/websocket/monitoring.go:// WebSocketDashboard provides a real-time dashboard
./apps/mcp-server/internal/api/websocket/monitoring.go:type WebSocketDashboard struct {
./apps/mcp-server/internal/api/websocket/monitoring.go:// DashboardHub manages dashboard WebSocket connections
./apps/mcp-server/internal/api/websocket/monitoring.go:// DashboardConnection represents a dashboard WebSocket connection
./apps/mcp-server/internal/api/websocket/monitoring.go:	// conn field reserved for WebSocket connection
./apps/mcp-server/internal/api/websocket/monitoring.go:	// conn   *websocket.Conn
./apps/mcp-server/internal/api/websocket/monitoring.go:// NewWebSocketDashboard creates a new dashboard
./apps/mcp-server/internal/api/websocket/monitoring.go:func NewWebSocketDashboard(server *Server) *WebSocketDashboard {
./apps/mcp-server/internal/api/websocket/monitoring.go:	return &WebSocketDashboard{
./apps/mcp-server/internal/api/websocket/workflow_engine_transactional.go:package websocket
./apps/mcp-server/internal/api/websocket/notification_manager.go:package websocket
./apps/mcp-server/internal/api/websocket/notification_manager.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/notification_manager.go:// NotificationManager handles broadcasting notifications to WebSocket connections
./apps/mcp-server/internal/api/websocket/task_manager.go:package websocket
./apps/mcp-server/internal/api/websocket/agent_registry_db.go:package websocket
./apps/mcp-server/internal/api/websocket/tracing_handler.go:package websocket
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	ctx, span := h.tracer(ctx, fmt.Sprintf("websocket.%s", method))
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	span.SetAttribute("websocket.method", method)
./apps/mcp-server/internal/api/websocket/tracing_handler.go:		span.SetAttribute("websocket.connection_id", connectionID)
./apps/mcp-server/internal/api/websocket/tracing_handler.go:		h.logger.Error("WebSocket handler error", map[string]interface{}{
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	ctx, span := h.tracer(ctx, fmt.Sprintf("websocket.message.%s", method))
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	span.SetAttribute("websocket.method", method)
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	span.SetAttribute("websocket.message_id", msg.ID)
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	span.SetAttribute("websocket.message_type", int(msg.Type))
./apps/mcp-server/internal/api/websocket/tracing_handler.go:		span.SetAttribute("websocket.connection_id", connectionID)
./apps/mcp-server/internal/api/websocket/tracing_handler.go:		h.logger.Error("WebSocket message handler error", map[string]interface{}{
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	ctx, span := h.tracer(ctx, fmt.Sprintf("websocket.notification.%s", method))
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	span.SetAttribute("websocket.notification_type", method)
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	h.metrics.IncrementCounterWithLabels("websocket_handler_total", 1, map[string]string{
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	h.metrics.RecordHistogram("websocket_handler_duration_seconds", duration.Seconds(), map[string]string{
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	h.metrics.IncrementCounterWithLabels("websocket_message_handled_total", 1, map[string]string{
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	h.metrics.RecordHistogram("websocket_message_duration_seconds", duration.Seconds(), map[string]string{
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	h.metrics.IncrementCounterWithLabels("websocket_notification_total", 1, map[string]string{
./apps/mcp-server/internal/api/websocket/tracing_handler.go:	h.metrics.RecordHistogram("websocket_notification_duration_seconds", duration.Seconds(), map[string]string{
./apps/mcp-server/internal/api/websocket/tracing_handler.go:// ExtractTraceContext extracts trace context from WebSocket message headers
./apps/mcp-server/internal/api/websocket/agent_registry_enhanced.go:package websocket
./apps/mcp-server/internal/api/websocket/connection.go:package websocket
./apps/mcp-server/internal/api/websocket/connection.go:	"github.com/coder/websocket"
./apps/mcp-server/internal/api/websocket/connection.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/connection.go:// readPump pumps messages from the websocket connection to the hub
./apps/mcp-server/internal/api/websocket/connection.go:			case websocket.MessageBinary:
./apps/mcp-server/internal/api/websocket/connection.go:			case websocket.MessageText:
./apps/mcp-server/internal/api/websocket/connection.go:			if websocket.CloseStatus(readErr) == websocket.StatusNormalClosure {
./apps/mcp-server/internal/api/websocket/connection.go:// writePump pumps messages from the hub to the websocket connection
./apps/mcp-server/internal/api/websocket/connection.go:						err = conn.Write(writeCtx, websocket.MessageBinary, binaryData)
./apps/mcp-server/internal/api/websocket/connection.go:						err = conn.Write(writeCtx, websocket.MessageText, message)
./apps/mcp-server/internal/api/websocket/connection.go:					err = conn.Write(writeCtx, websocket.MessageText, message)
./apps/mcp-server/internal/api/websocket/connection.go:				err = conn.Write(writeCtx, websocket.MessageText, message)
./apps/mcp-server/internal/api/websocket/connection.go:		// Close the websocket connection
./apps/mcp-server/internal/api/websocket/connection.go:			closeErr = c.conn.Close(websocket.StatusNormalClosure, "Connection closed by server")
./apps/mcp-server/internal/api/websocket/agent_circuit_breaker.go:package websocket
./apps/mcp-server/internal/api/websocket/regression_test.go:package websocket
./apps/mcp-server/internal/api/websocket/regression_test.go:// TestWebSocketAuthServicePointerRegression verifies the fix for the nil pointer dereference
./apps/mcp-server/internal/api/websocket/regression_test.go:// bug that occurred when the WebSocket server used a value type for auth.Service instead
./apps/mcp-server/internal/api/websocket/regression_test.go:// Bug: The WebSocket server was storing auth.Service as a value type, which caused
./apps/mcp-server/internal/api/websocket/regression_test.go:// Fix: Changed the WebSocket server to use *auth.Service (pointer type) to avoid
./apps/mcp-server/internal/api/websocket/regression_test.go:func TestWebSocketAuthServicePointerRegression(t *testing.T) {
./apps/mcp-server/internal/api/websocket/regression_test.go:	// Create WebSocket server - this should not panic even with uninitialized auth service
./apps/mcp-server/internal/api/websocket/batch_test.go:package websocket
./apps/mcp-server/internal/api/websocket/batch_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/agent_registry_interface.go:package websocket
./apps/mcp-server/internal/api/websocket/mocks.go:package websocket
./apps/mcp-server/internal/api/websocket/pool_test.go:package websocket
./apps/mcp-server/internal/api/websocket/pool_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/pool_test.go:	// Pool should remain empty since we don't reuse WebSocket connections
./apps/mcp-server/internal/api/websocket/adapters.go:package websocket
./apps/mcp-server/internal/api/websocket/adapters.go:// contextManagerAdapter adapts core.ContextManagerInterface to websocket.ContextManager
./apps/mcp-server/internal/api/websocket/adapters.go:// GetContext implements websocket.ContextManager
./apps/mcp-server/internal/api/websocket/adapters.go:// UpdateContext implements websocket.ContextManager with simplified signature
./apps/mcp-server/internal/api/websocket/adapters.go:// TruncateContext implements websocket.ContextManager
./apps/mcp-server/internal/api/websocket/adapters.go:// CreateContext implements websocket.ContextManager
./apps/mcp-server/internal/api/websocket/agent_message_handlers.go:package websocket
./apps/mcp-server/internal/api/websocket/conflict_handlers.go:package websocket
./apps/mcp-server/internal/api/websocket/agent_registry_test.go:package websocket
./apps/mcp-server/internal/api/websocket/agent_registry_test.go:				ConnectionDetails: map[string]interface{}{"protocol": "websocket"},
./apps/mcp-server/internal/api/websocket/subscription_manager.go:package websocket
./apps/mcp-server/internal/api/websocket/workspace_manager.go:package websocket
./apps/mcp-server/internal/api/websocket/workspace_manager.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/pool.go:package websocket
./apps/mcp-server/internal/api/websocket/pool.go:	"github.com/coder/websocket"
./apps/mcp-server/internal/api/websocket/pool.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/pool.go:	// Message pool for WebSocket messages
./apps/mcp-server/internal/api/websocket/pool.go:	// Always create a new connection for WebSocket
./apps/mcp-server/internal/api/websocket/pool.go:	// WebSocket connections are stateful and should not be reused
./apps/mcp-server/internal/api/websocket/pool.go:	// Close the websocket connection if it exists
./apps/mcp-server/internal/api/websocket/pool.go:		_ = conn.conn.Close(websocket.StatusNormalClosure, "")
./apps/mcp-server/internal/api/websocket/pool.go:	// Don't return to pool - WebSocket connections should not be reused
./apps/mcp-server/internal/api/websocket/pool.go:	// Don't pre-allocate connections since WebSocket connections should not be reused
./apps/mcp-server/internal/api/websocket/pool.go:	// ALWAYS create a new connection for WebSocket
./apps/mcp-server/internal/api/websocket/pool.go:	// WebSocket connections are stateful and should never be reused
./apps/mcp-server/internal/api/websocket/pool.go:	// Close the underlying websocket connection if it exists
./apps/mcp-server/internal/api/websocket/pool.go:		_ = conn.conn.Close(websocket.StatusNormalClosure, "")
./apps/mcp-server/internal/api/websocket/pool.go:	// Always destroy WebSocket connections - they should never be reused
./apps/mcp-server/internal/api/websocket/pool.go:			// Don't maintain a minimum pool size - WebSocket connections should not be reused
./apps/mcp-server/internal/api/websocket/pool.go:			_ = conn.conn.Close(websocket.StatusGoingAway, "server shutdown")
./apps/mcp-server/internal/api/websocket/server_test.go:package websocket
./apps/mcp-server/internal/api/websocket/server_test.go:	"github.com/coder/websocket"
./apps/mcp-server/internal/api/websocket/server_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/server_test.go:// TestHandleWebSocket tests WebSocket connection handling
./apps/mcp-server/internal/api/websocket/server_test.go:func TestHandleWebSocket(t *testing.T) {
./apps/mcp-server/internal/api/websocket/server_test.go:	ts := httptest.NewServer(http.HandlerFunc(server.HandleWebSocket))
./apps/mcp-server/internal/api/websocket/server_test.go:	// Convert http:// to ws://
./apps/mcp-server/internal/api/websocket/server_test.go:		_, _, err := websocket.Dial(ctx, wsURL, nil)
./apps/mcp-server/internal/api/websocket/server_test.go:		opts := &websocket.DialOptions{
./apps/mcp-server/internal/api/websocket/server_test.go:		_, _, err := websocket.Dial(ctx, wsURL, opts)
./apps/mcp-server/internal/api/websocket/agent_message_broker.go:package websocket
./apps/mcp-server/internal/api/websocket/connection_nil_safety_test.go:package websocket
./apps/mcp-server/internal/api/websocket/connection_nil_safety_test.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/test_helpers.go:package websocket
./apps/mcp-server/internal/api/websocket/test_helpers.go:	"github.com/coder/websocket"
./apps/mcp-server/internal/api/websocket/test_helpers.go:	ws "github.com/developer-mesh/developer-mesh/pkg/models/websocket"
./apps/mcp-server/internal/api/websocket/test_helpers.go:func NewConnection(id string, conn *websocket.Conn, hub *Server) *Connection {
./apps/mcp-server/internal/api/server.go:	"github.com/developer-mesh/developer-mesh/apps/mcp-server/internal/api/websocket"
./apps/mcp-server/internal/api/server.go:	// WebSocket server
./apps/mcp-server/internal/api/server.go:	wsServer *websocket.Server
./apps/mcp-server/internal/api/server.go:	// Initialize WebSocket server if enabled
./apps/mcp-server/internal/api/server.go:	if cfg.WebSocket.Enabled {
./apps/mcp-server/internal/api/server.go:		wsConfig := websocket.Config{
./apps/mcp-server/internal/api/server.go:			MaxConnections:  cfg.WebSocket.MaxConnections,
./apps/mcp-server/internal/api/server.go:			ReadBufferSize:  cfg.WebSocket.ReadBufferSize,
./apps/mcp-server/internal/api/server.go:			WriteBufferSize: cfg.WebSocket.WriteBufferSize,
./apps/mcp-server/internal/api/server.go:			PingInterval:    cfg.WebSocket.PingInterval,
./apps/mcp-server/internal/api/server.go:			PongTimeout:     cfg.WebSocket.PongTimeout,
./apps/mcp-server/internal/api/server.go:			MaxMessageSize:  cfg.WebSocket.MaxMessageSize,
./apps/mcp-server/internal/api/server.go:			Security:        cfg.WebSocket.Security,
./apps/mcp-server/internal/api/server.go:			RateLimit:       cfg.WebSocket.RateLimit,
./apps/mcp-server/internal/api/server.go:		s.wsServer = websocket.NewServer(authService, metrics, observability.DefaultLogger, wsConfig)
./apps/mcp-server/internal/api/server.go:			contextAdapter := websocket.NewContextManagerAdapter(engine.GetContextManager())
./apps/mcp-server/internal/api/server.go:		observability.DefaultLogger.Info("WebSocket server initialized", map[string]interface{}{
./apps/mcp-server/internal/api/server.go:			"max_connections": cfg.WebSocket.MaxConnections,
./apps/mcp-server/internal/api/server.go:		// Pass the REST client to the WebSocket server if it exists
./apps/mcp-server/internal/api/server.go:	// Setup WebSocket endpoint
./apps/mcp-server/internal/api/server.go:	s.logger.Info("WebSocket route registration check", map[string]interface{}{
./apps/mcp-server/internal/api/server.go:		"enabled":      s.config.WebSocket.Enabled,
./apps/mcp-server/internal/api/server.go:	if s.config.WebSocket.Enabled && s.wsServer != nil {
./apps/mcp-server/internal/api/server.go:			s.wsServer.HandleWebSocket(c.Writer, c.Request)
./apps/mcp-server/internal/api/server.go:		s.logger.Info("WebSocket endpoint enabled at /ws", map[string]interface{}{
./apps/mcp-server/internal/api/server.go:			"max_connections": s.config.WebSocket.MaxConnections,
./apps/mcp-server/internal/api/server.go:		s.logger.Warn("WebSocket endpoint NOT enabled", map[string]interface{}{
./apps/mcp-server/internal/api/server.go:			"enabled":      s.config.WebSocket.Enabled,
./apps/mcp-server/internal/api/server.go:	// Register WebSocket monitoring routes
./apps/mcp-server/internal/api/server.go:	if s.config.WebSocket.Enabled && s.wsServer != nil {
./apps/mcp-server/internal/api/server.go:		wsMonitoring := websocket.NewMonitoringEndpoints(s.wsServer)
./apps/mcp-server/internal/api/server.go:		s.logger.Info("WebSocket monitoring routes registered", nil)
./apps/mcp-server/internal/api/server.go:	// Close WebSocket server if enabled
./apps/mcp-server/internal/api/server.go:		s.logger.Info("Closing WebSocket connections", nil)
./apps/mcp-server/internal/api/server.go:			s.logger.Error("Failed to close WebSocket server", map[string]interface{}{
./apps/mcp-server/internal/api/server.go:// InjectServices injects services into the WebSocket server
./apps/mcp-server/internal/api/server.go:		s.logger.Warn("Cannot inject services: WebSocket server is not initialized", nil)
./apps/mcp-server/internal/api/server.go:	// Inject services into WebSocket server
./apps/mcp-server/internal/api/server.go:	s.logger.Info("Services successfully injected into WebSocket server", map[string]interface{}{
./apps/mcp-server/internal/api/server.go:	// Pass services to WebSocket server if it exists
./apps/mcp-server/internal/api/server.go:		s.logger.Info("Multi-agent services set on WebSocket server", map[string]interface{}{
./apps/mcp-server/internal/api/server.go:		s.logger.Warn("WebSocket server is nil, cannot set services", nil)
./apps/mcp-server/internal/api/adapters.go:	"github.com/developer-mesh/developer-mesh/apps/mcp-server/internal/api/websocket"
./apps/mcp-server/internal/api/adapters.go:// ToolRegistryAdapter adapts tools.Registry to websocket.ToolRegistry
./apps/mcp-server/internal/api/adapters.go:func NewToolRegistryAdapter(registry *tools.Registry) websocket.ToolRegistry {
./apps/mcp-server/internal/api/adapters.go:func (a *ToolRegistryAdapter) GetToolsForAgent(agentID string) ([]websocket.Tool, error) {
./apps/mcp-server/internal/api/adapters.go:	// Convert to websocket.Tool format
./apps/mcp-server/internal/api/adapters.go:	tools := make([]websocket.Tool, 0, len(allTools))
./apps/mcp-server/internal/api/adapters.go:			tools = append(tools, websocket.Tool{
./apps/mcp-server/internal/api/adapters.go:	a.executions.Store(executionID, &websocket.ToolExecutionStatus{
./apps/mcp-server/internal/api/adapters.go:	a.executions.Store(executionID, &websocket.ToolExecutionStatus{
./apps/mcp-server/internal/api/adapters.go:		status := val.(*websocket.ToolExecutionStatus)
./apps/mcp-server/internal/api/adapters.go:func (a *ToolRegistryAdapter) GetExecutionStatus(ctx context.Context, executionID string) (*websocket.ToolExecutionStatus, error) {
./apps/mcp-server/internal/api/adapters.go:		return val.(*websocket.ToolExecutionStatus), nil
./apps/mcp-server/internal/api/adapters.go:// EventBusAdapter adapts events.Bus to websocket.EventBus
./apps/mcp-server/internal/api/adapters.go:func NewEventBusAdapter(bus *events.Bus) websocket.EventBus {
./apps/mcp-server/internal/api/adapters.go:		// Create a handler that will send events to the WebSocket connection
./apps/mcp-server/internal/api/adapters.go:			// In a real implementation, this would send the event to the WebSocket connection
./apps/mcp-server/internal/api/adapters.go:	return a.bus.Publish(context.Background(), event, "websocket", data)
./pkg/agents/types_three_tier.go:	ConnectionDetails  map[string]interface{} `json:"connection_details" db:"connection_details"`   // WebSocket ID, IP, etc.
./pkg/models/websocket/binary.go:package websocket
./pkg/models/websocket/types_test.go:package websocket
./pkg/models/websocket/binary_test.go:package websocket
./pkg/models/websocket/types.go:package websocket
./pkg/models/websocket/types.go:// MessageType represents WebSocket message types
./pkg/models/websocket/types.go:// Message represents a WebSocket message (JSON initially)
./pkg/models/websocket/types.go:// Error represents a WebSocket error
./pkg/models/websocket/types.go:// Connection represents a WebSocket connection
./pkg/models/websocket/types.go:// ConnectionState represents the state of a WebSocket connection
./pkg/models/websocket/types.go:// NewError creates a new WebSocket error
./pkg/models/agent_manifest.go:	ChannelTypeWebSocket = "websocket"
./pkg/observability/prometheus_metrics.go:// WebSocketMetrics provides WebSocket-specific metrics
./pkg/observability/prometheus_metrics.go:type WebSocketMetrics struct {
./pkg/observability/prometheus_metrics.go:// NewWebSocketMetrics creates WebSocket-specific metrics
./pkg/observability/prometheus_metrics.go:func NewWebSocketMetrics(namespace string) *WebSocketMetrics {
./pkg/observability/prometheus_metrics.go:	return &WebSocketMetrics{
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Help:      "Total number of WebSocket connections",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Help:      "Number of active WebSocket connections",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/observability/prometheus_metrics.go:			Subsystem: "websocket",
./pkg/common/config/config.go:	WebSocket   *WebSocketConfig  `mapstructure:"websocket"`
./pkg/common/config/config.go:// WebSocketConfig holds WebSocket server configuration
./pkg/common/config/config.go:type WebSocketConfig struct {
./pkg/common/config/config.go:	Security        *WebSocketSecurityConfig  `mapstructure:"security"`
./pkg/common/config/config.go:	RateLimit       *WebSocketRateLimitConfig `mapstructure:"rate_limit"`
./pkg/common/config/config.go:// WebSocketSecurityConfig holds WebSocket security configuration
./pkg/common/config/config.go:type WebSocketSecurityConfig struct {
./pkg/common/config/config.go:// WebSocketRateLimitConfig holds WebSocket rate limiting configuration
./pkg/common/config/config.go:type WebSocketRateLimitConfig struct {
./pkg/services/notification_service_impl.go:		// In production, this would send to WebSocket connections,
./pkg/services/workspace_service_impl.go:	// In production, this would use WebSocket or message queue
./pkg/services/workspace_service_impl.go:	// In production, this would use WebSocket or message queue
