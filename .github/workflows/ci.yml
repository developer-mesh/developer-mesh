name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          
      - name: Run linter
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          make lint

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          
      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          make gosec

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [mcp-server, rest-api, worker, mockserver]
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug environment
        run: |
          echo "=== Go environment ==="
          which go || echo "Go not installed"
          go version || echo "Go version failed"
          echo "=== Directory structure ==="
          ls -la
          ls -la apps/
          echo "=== go.work contents ==="
          cat go.work
          echo "=== go.mod files ==="
          find . -name "go.mod" -type f
          
      - name: Build Docker image
        run: |
          echo "=== Building ${{ matrix.app }} ==="
          echo "Current directory: $(pwd)"
          echo "=== Dockerfile contents ==="
          cat apps/${{ matrix.app }}/Dockerfile | head -35
          echo "=== Building with verbose output ==="
          docker build --no-cache --progress=plain -f apps/${{ matrix.app }}/Dockerfile -t ${{ matrix.app }}:test . 2>&1 || {
            echo "=== Build failed, checking go.mod ==="
            cat apps/${{ matrix.app }}/go.mod | head -20
            echo "=== Checking if go.work is being copied ==="
            docker run --rm -v $(pwd):/workspace alpine:latest sh -c "cd /workspace && ls -la go.work*"
            exit 1
          }