# DevOps MCP Production Environment Configuration
# Copy this file to .env on your production server and update with your values
# IMPORTANT: Use secure secret management (AWS Secrets Manager, HashiCorp Vault, etc.) for sensitive values

# Application Environment
ENVIRONMENT=production

# Service Configuration
MCP_SERVER_PORT=8080
REST_API_PORT=8081

# Database Configuration (RDS)
DATABASE_HOST=${RDS_ENDPOINT}
DATABASE_PORT=5432
DATABASE_USER=dbadmin
DATABASE_PASSWORD=${RDS_PASSWORD}  # From AWS Secrets Manager
DATABASE_NAME=devops_mcp
DATABASE_SSL_MODE=require
DATABASE_TLS_ENABLED=true

# Redis Configuration (ElastiCache)
REDIS_ADDR=${ELASTICACHE_ENDPOINT}
REDIS_TLS_ENABLED=true
REDIS_AUTH_TOKEN=${ELASTICACHE_AUTH_TOKEN}  # From AWS Secrets Manager

# Security
JWT_SECRET=${JWT_SECRET}  # From AWS Secrets Manager (min 32 chars)
ADMIN_API_KEY=${ADMIN_API_KEY}  # From AWS Secrets Manager

# AWS Configuration
AWS_REGION=us-east-1
# Use IAM roles instead of keys in production
# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY should be provided by IAM role
S3_BUCKET=your-production-bucket
SQS_QUEUE_URL=https://sqs.us-east-1.amazonaws.com/your-account/your-queue

# GitHub Integration
GITHUB_TOKEN=${GITHUB_TOKEN}  # From AWS Secrets Manager
GITHUB_APP_ID=${GITHUB_APP_ID}
GITHUB_APP_PRIVATE_KEY=${GITHUB_APP_PRIVATE_KEY}  # From AWS Secrets Manager
GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}  # From AWS Secrets Manager

# TLS Configuration
TLS_MIN_VERSION=1.3
API_TLS_ENABLED=true
TLS_CERT_FILE=/etc/letsencrypt/live/your-domain/fullchain.pem
TLS_KEY_FILE=/etc/letsencrypt/live/your-domain/privkey.pem

# Monitoring
METRICS_ENABLED=true
AUDIT_LOG_ENABLED=true
LOG_LEVEL=info  # Use 'warn' or 'error' for less verbose logging

# Feature Flags
ENABLE_VECTOR_SEARCH=true
ENABLE_GITHUB_INTEGRATION=true
ENABLE_WEBHOOK_PROCESSING=true

# Embedding Configuration
BEDROCK_ENABLED=true
BEDROCK_SESSION_LIMIT=0.10  # Cost limit per session
GLOBAL_COST_LIMIT=100.0     # Daily cost limit in USD

# Performance Tuning
GOMAXPROCS=0               # Use all available CPUs
GOGC=200                   # Less frequent GC
DB_POOL_MAX_OPEN=100       # Adjust based on RDS instance
REDIS_POOL_SIZE=100        # Adjust based on ElastiCache instance
WORKER_POOL_SIZE=50        # Adjust based on workload

# High Availability
HA_ENABLED=true
ENABLE_CIRCUIT_BREAKERS=true

# Cost Optimization
ENABLE_SPOT_INSTANCES=false  # Set to true if using spot instances
AUTO_SCALING_ENABLED=true
MIN_INSTANCES=2
MAX_INSTANCES=10