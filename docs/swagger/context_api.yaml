openapi: 3.0.3
info:
  title: MCP Server API
  description: |
    MCP Server provides APIs for managing conversation contexts, tools, and vector operations
    
    ## Features
    - Context management for AI conversations
    - DevOps tool operations
    - Vector embeddings storage and search
  version: 1.0.0
  contact:
    name: DevOps MCP Team
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  
servers:
  - url: /api/v1
    description: Default MCP Server API endpoint
  - url: https://{environment}.example.com/api/v1
    description: Environment-specific endpoint
    variables:
      environment:
        enum:
          - dev
          - staging
          - prod
        default: dev
        description: API environment

tags:
  - name: context
    description: Context management operations
  - name: tools
    description: DevOps tools integration
  - name: vector
    description: Vector embedding operations

paths:
  # Context API Paths
  /contexts:
    get:
      summary: List contexts for an agent
      description: Returns a list of contexts for the specified agent, optionally filtered by session ID
      operationId: listContexts
      tags:
        - context
      parameters:
        - name: agent_id
          in: query
          required: true
          description: The agent ID
          schema:
            type: string
        - name: session_id
          in: query
          required: false
          description: Optional session ID filter
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Maximum number of contexts to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  contexts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Context'
                  _links:
                    $ref: '#/components/schemas/Links'
              examples:
                success:
                  value:
                    contexts:
                      - id: "ctx_123"
                        agent_id: "agent_456"
                        model_id: "gpt-4"
                        session_id: "session_789"
                        current_tokens: 150
                        max_tokens: 2000
                        created_at: "2025-04-22T12:00:00Z"
                        updated_at: "2025-04-22T12:30:00Z"
                    _links:
                      self: "/api/v1/contexts?agent_id=agent_456"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    post:
      summary: Create a new context
      description: Creates a new conversation context
      operationId: createContext
      tags:
        - context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Context'
            examples:
              new_context:
                value:
                  agent_id: "agent_456"
                  model_id: "gpt-4"
                  session_id: "session_789"
                  max_tokens: 2000
                  content: []
      responses:
        '201':
          description: Context created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "context created"
                  id:
                    type: string
                    example: "ctx_123"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /contexts/{contextID}:
    parameters:
      - name: contextID
        in: path
        required: true
        description: The context ID
        schema:
          type: string
          
    get:
      summary: Get a context by ID
      description: Returns a context by its ID
      operationId: getContext
      tags:
        - context
      parameters:
        - name: include_content
          in: query
          required: false
          description: Whether to include content items in the response
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  message:
                    type: string
              examples:
                success:
                  value:
                    id: "ctx_123"
                    message: "context retrieved"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    put:
      summary: Update a context
      description: Updates an existing context content or metadata
      operationId: updateContext
      tags:
        - context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: array
                  items:
                    $ref: '#/components/schemas/ContextItem'
                options:
                  $ref: '#/components/schemas/ContextUpdateOptions'
              required:
                - content
            examples:
              update_content:
                value:
                  content:
                    - role: "user"
                      content: "Hello AI assistant!"
                  options:
                    truncate: false
                    replace_content: true
      responses:
        '200':
          description: Context updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    delete:
      summary: Delete a context
      description: Deletes a context by its ID
      operationId: deleteContext
      tags:
        - context
      responses:
        '200':
          description: Context deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "deleted"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /contexts/{contextID}/summary:
    parameters:
      - name: contextID
        in: path
        required: true
        description: The context ID
        schema:
          type: string
          
    get:
      summary: Get a summary of a context
      description: Returns an AI-generated summary of a context
      operationId: summarizeContext
      tags:
        - context
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                    description: AI-generated summary of the context
              examples:
                success:
                  value:
                    summary: "Conversation about AI capabilities and limitations."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /contexts/{contextID}/search:
    parameters:
      - name: contextID
        in: path
        required: true
        description: The context ID
        schema:
          type: string
          
    post:
      summary: Search within a context
      description: Searches for text or patterns within a context
      operationId: searchContext
      tags:
        - context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: The search query
              required:
                - query
            examples:
              search_query:
                value:
                  query: "machine learning"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContextItem'
              examples:
                success:
                  value:
                    results:
                      - id: "item_123"
                        role: "assistant"
                        content: "Machine learning is a subset of artificial intelligence."
                        tokens: 12
                        timestamp: "2025-04-22T12:05:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Tool API Paths
  /tools:
    get:
      summary: List all available tools
      description: Returns a list of all available DevOps tools with their descriptions and actions
      operationId: listAvailableTools
      tags:
        - tools
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  tools:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tool'
                  _links:
                    $ref: '#/components/schemas/Links'
              examples:
                tools_list:
                  value:
                    tools:
                      - name: "github"
                        description: "GitHub integration for repository, PR, and code management"
                        actions:
                          - "create_issue"
                          - "close_issue"
                          - "create_pull_request"
                        safety_notes: "Cannot delete repositories for safety reasons"
                    _links:
                      self: "/api/v1/tools"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tools/{tool}:
    parameters:
      - name: tool
        in: path
        required: true
        description: The tool name
        schema:
          type: string
    
    get:
      summary: Get tool details
      description: Get detailed information about a specific DevOps tool
      operationId: getToolDetails
      tags:
        - tools
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
              examples:
                github_tool:
                  value:
                    name: "github"
                    description: "GitHub integration for repository, PR, and code management"
                    actions:
                      - "create_issue"
                      - "close_issue"
                      - "create_pull_request"
                    safety_notes: "Cannot delete repositories for safety reasons"
                    _links:
                      self: "/api/v1/tools/github"
                      actions: "/api/v1/tools/github/actions"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tools/{tool}/actions:
    parameters:
      - name: tool
        in: path
        required: true
        description: The tool name
        schema:
          type: string
    
    get:
      summary: List allowed actions
      description: Lists all allowed actions for a specific tool
      operationId: listAllowedActions
      tags:
        - tools
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  tool:
                    type: string
                  allowed_actions:
                    type: array
                    items:
                      type: string
                  disallowed_actions:
                    type: array
                    items:
                      type: string
                  safety_notes:
                    type: string
              examples:
                github_actions:
                  value:
                    tool: "github"
                    allowed_actions:
                      - "create_issue"
                      - "close_issue"
                      - "create_pull_request"
                    disallowed_actions:
                      - "delete_repository"
                      - "delete_branch"
                    safety_notes: "Repository deletion is restricted for safety reasons"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tools/{tool}/actions/{action}:
    parameters:
      - name: tool
        in: path
        required: true
        description: The tool name
        schema:
          type: string
      - name: action
        in: path
        required: true
        description: The action name
        schema:
          type: string
    
    get:
      summary: Get action details
      description: Get detailed information about a specific action for a DevOps tool
      operationId: getActionDetails
      tags:
        - tools
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
              examples:
                create_issue:
                  value:
                    name: "create_issue"
                    description: "Creates a new issue in a GitHub repository"
                    parameters:
                      owner: "Repository owner (organization or user)"
                      repo: "Repository name"
                      title: "Issue title"
                      body: "Issue description"
                    required_parameters:
                      - "owner"
                      - "repo"
                      - "title"
                    _links:
                      self: "/api/v1/tools/github/actions/create_issue"
                      tool: "/api/v1/tools/github"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Execute tool action
      description: Execute an action using a specific DevOps tool
      operationId: executeToolAction
      tags:
        - tools
      parameters:
        - name: context_id
          in: query
          required: true
          description: Context ID for tracking the operation
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              description: Action parameters
            examples:
              create_github_issue:
                value:
                  owner: "octocat"
                  repo: "hello-world"
                  title: "Bug in login form"
                  body: "The login form doesn't submit when using Safari"
                  labels: ["bug", "frontend"]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  tool:
                    type: string
                  action:
                    type: string
                  params:
                    type: object
                    additionalProperties: true
                  _links:
                    $ref: '#/components/schemas/Links'
              examples:
                success:
                  value:
                    status: "success"
                    message: "Executed create_issue action on github tool"
                    tool: "github"
                    action: "create_issue"
                    params:
                      owner: "octocat"
                      repo: "hello-world"
                      title: "Bug in login form"
                    _links:
                      self: "/api/v1/tools/github/actions/create_issue"
                      tool: "/api/v1/tools/github"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tools/{tool}/queries:
    parameters:
      - name: tool
        in: path
        required: true
        description: The tool name
        schema:
          type: string
    
    post:
      summary: Query tool data
      description: Retrieve data from a DevOps tool using a custom query
      operationId: queryToolData
      tags:
        - tools
      parameters:
        - name: context_id
          in: query
          required: true
          description: Context ID for tracking the operation
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              description: Query parameters
            examples:
              search_prs:
                value:
                  repo: "octocat/hello-world"
                  state: "open"
                  sort: "created"
                  direction: "desc"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  tool:
                    type: string
                  query_params:
                    type: object
                    additionalProperties: true
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
              examples:
                success:
                  value:
                    status: "success"
                    message: "Queried data from github tool"
                    tool: "github"
                    query_params:
                      repo: "octocat/hello-world"
                      state: "open"
                    data:
                      - id: "1"
                        name: "Example data item 1"
                      - id: "2"
                        name: "Example data item 2"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Vector API Paths
  /vectors/store:
    post:
      summary: Store an embedding
      description: Stores a vector embedding for a context
      operationId: storeEmbedding
      tags:
        - vector
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreEmbeddingRequest'
            examples:
              store_embedding:
                value:
                  context_id: "ctx_123"
                  content_index: 0
                  text: "Hello AI assistant!"
                  embedding: [0.1, 0.2, 0.3]
                  model_id: "text-embedding-ada-002"
      responses:
        '200':
          description: Embedding stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Embedding'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /vectors/search:
    post:
      summary: Search embeddings
      description: Searches for similar vector embeddings
      operationId: searchEmbeddings
      tags:
        - vector
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchEmbeddingsRequest'
            examples:
              search_request:
                value:
                  context_id: "ctx_123"
                  query_embedding: [0.1, 0.2, 0.3]
                  limit: 5
                  model_id: "text-embedding-ada-002"
                  similarity_threshold: 0.7
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  embeddings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Embedding'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /vectors/context/{context_id}:
    parameters:
      - name: context_id
        in: path
        required: true
        description: The context ID
        schema:
          type: string
    
    get:
      summary: Get context embeddings
      description: Get all embeddings for a context
      operationId: getContextEmbeddings
      tags:
        - vector
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  embeddings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Embedding'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete context embeddings
      description: Delete all embeddings for a context
      operationId: deleteContextEmbeddings
      tags:
        - vector
      responses:
        '200':
          description: Embeddings deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "deleted"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /vectors/models:
    get:
      summary: Get supported models
      description: Get a list of all model IDs with embeddings
      operationId: getSupportedModels
      tags:
        - vector
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      type: string
              examples:
                models_list:
                  value:
                    models:
                      - "text-embedding-ada-002"
                      - "text-embedding-3-small"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /vectors/context/{context_id}/model/{model_id}:
    parameters:
      - name: context_id
        in: path
        required: true
        description: The context ID
        schema:
          type: string
      - name: model_id
        in: path
        required: true
        description: The model ID
        schema:
          type: string
    
    get:
      summary: Get model embeddings
      description: Get embeddings for a specific model in a context
      operationId: getModelEmbeddings
      tags:
        - vector
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  embeddings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Embedding'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete model embeddings
      description: Delete embeddings for a specific model in a context
      operationId: deleteModelEmbeddings
      tags:
        - vector
      responses:
        '200':
          description: Embeddings deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "deleted"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Context:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the context
          example: "ctx_123"
        agent_id:
          type: string
          description: Identifier for the AI agent
          example: "agent_456"
        model_id:
          type: string
          description: Identifier for the AI model
          example: "gpt-4"
        session_id:
          type: string
          description: Optional identifier for the user session
          example: "session_789"
        content:
          type: array
          description: Array of context items
          items:
            $ref: '#/components/schemas/ContextItem'
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true
          example:
            source: "chat"
            user_timezone: "America/New_York"
        current_tokens:
          type: integer
          description: Current token count
          example: 150
        max_tokens:
          type: integer
          description: Maximum token limit
          example: 2000
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-04-22T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-04-22T12:30:00Z"
        expires_at:
          type: string
          format: date-time
          description: Optional expiration timestamp
          example: "2025-05-22T12:00:00Z"
        _links:
          $ref: '#/components/schemas/Links'
      required:
        - agent_id
        - model_id
        
    ContextItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the context item
          example: "item_123"
        role:
          type: string
          description: Role of the context item
          enum: [user, assistant, system, tool, webhook]
          example: "user"
        content:
          type: string
          description: Text content of the context item
          example: "Hello AI assistant!"
        tokens:
          type: integer
          description: Token count for this item
          example: 5
        timestamp:
          type: string
          format: date-time
          description: Timestamp when this item was created
          example: "2025-04-22T12:05:00Z"
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true
          example:
            ip: "192.168.1.1"
            client: "web"
      required:
        - role
        - content
        
    ContextUpdateOptions:
      type: object
      properties:
        truncate:
          type: boolean
          description: Whether to truncate the context if it exceeds max tokens
          default: false
          example: false
        truncate_strategy:
          type: string
          description: Strategy for truncation
          enum: [oldest_first, preserving_user, relevance_based]
          default: oldest_first
          example: "oldest_first"
        replace_content:
          type: boolean
          description: Whether to replace the entire content instead of appending
          default: false
          example: true
        relevance_parameters:
          type: object
          description: Parameters for relevance-based operations
          additionalProperties: true
          example:
            threshold: 0.7
            preserve_system: true
      
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request parameters"
      required:
        - error

    Links:
      type: object
      description: HATEOAS links
      additionalProperties:
        type: string
      example:
        self: "/api/v1/contexts/ctx_123"
        update: "/api/v1/contexts/ctx_123"
        delete: "/api/v1/contexts/ctx_123"

    Tool:
      type: object
      properties:
        name:
          type: string
          description: Tool name
          example: "github"
        description:
          type: string
          description: Tool description
          example: "GitHub integration for repository, PR, and code management"
        actions:
          type: array
          description: Available actions
          items:
            type: string
          example: ["create_issue", "close_issue", "create_pull_request"]
        safety_notes:
          type: string
          description: Safety-related notes
          example: "Cannot delete repositories for safety reasons"
        _links:
          $ref: '#/components/schemas/Links'
      required:
        - name
        - description
        - actions

    Action:
      type: object
      properties:
        name:
          type: string
          description: Action name
          example: "create_issue"
        description:
          type: string
          description: Action description
          example: "Creates a new issue in a GitHub repository"
        parameters:
          type: object
          description: Parameter descriptions
          additionalProperties:
            type: string
          example:
            owner: "Repository owner (organization or user)"
            repo: "Repository name"
            title: "Issue title"
        required_parameters:
          type: array
          description: List of required parameters
          items:
            type: string
          example: ["owner", "repo", "title"]
        example:
          type: object
          description: Example payload
          additionalProperties: true
          example:
            owner: "octocat"
            repo: "hello-world"
            title: "Bug in login form"
        _links:
          $ref: '#/components/schemas/Links'
      required:
        - name
        - description

    StoreEmbeddingRequest:
      type: object
      properties:
        context_id:
          type: string
          description: Context ID
          example: "ctx_123"
        content_index:
          type: integer
          description: Index of the content item
          example: 0
        text:
          type: string
          description: Text that was embedded
          example: "Hello AI assistant!"
        embedding:
          type: array
          description: Vector embedding
          items:
            type: number
            format: float
          example: [0.1, 0.2, 0.3]
        model_id:
          type: string
          description: Embedding model ID
          example: "text-embedding-ada-002"
      required:
        - context_id
        - content_index
        - text
        - embedding
        - model_id

    SearchEmbeddingsRequest:
      type: object
      properties:
        context_id:
          type: string
          description: Context ID
          example: "ctx_123"
        query_embedding:
          type: array
          description: Query vector embedding
          items:
            type: number
            format: float
          example: [0.1, 0.2, 0.3]
        limit:
          type: integer
          description: Maximum number of results
          example: 5
          minimum: 1
          maximum: 100
        model_id:
          type: string
          description: Embedding model ID
          example: "text-embedding-ada-002"
        similarity_threshold:
          type: number
          description: Minimum similarity threshold
          example: 0.7
          minimum: 0
          maximum: 1
      required:
        - context_id
        - query_embedding
        - limit

    Embedding:
      type: object
      properties:
        context_id:
          type: string
          description: Context ID
          example: "ctx_123"
        content_index:
          type: integer
          description: Index of the content item
          example: 0
        text:
          type: string
          description: Text that was embedded
          example: "Hello AI assistant!"
        embedding:
          type: array
          description: Vector embedding
          items:
            type: number
            format: float
          example: [0.1, 0.2, 0.3]
        model_id:
          type: string
          description: Embedding model ID
          example: "text-embedding-ada-002"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-04-22T12:00:00Z"
      required:
        - context_id
        - content_index
        - text
        - embedding
        - model_id

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            validation_error:
              value:
                error: "Invalid request parameters"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            auth_error:
              value:
                error: "Authentication required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            not_found:
              value:
                error: "Resource not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            server_error:
              value:
                error: "Internal server error"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT-based authentication
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication

security:
  - BearerAuth: []
  - ApiKeyAuth: []