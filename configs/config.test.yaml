# Test configuration for MCP Server (CI/Automated)

environment: "test"

api:
  listen_address: ":8080"
  read_timeout: 30s
  write_timeout: 30s
  idle_timeout: 60s
  enable_cors: true
  auth:
    jwt_secret: "test-jwt-secret"
    api_keys:
      admin: "test-admin-api-key"
      reader: "test-reader-api-key"
  rate_limit:
    enabled: true
    limit: 50
    period: 1m
    burst_factor: 3
  webhooks:
    github:
      enabled: true
      path: "/github"
      secret: "test-github-webhook-secret"

database:
  driver: "postgres"
  dsn: "${DATABASE_DSN}"
  max_open_conns: 5
  max_idle_conns: 2
  conn_max_lifetime: 15m
  maxOpenConns: 10
  maxIdleConns: 5
  connMaxLifetime: 1h

cache:
  type: "redis"
  address: "${REDIS_HOST}:${REDIS_PORT}"
  password: ""
  db: 0
  maxRetries: 3
  minRetryBackoff: 8ms
  maxRetryBackoff: 512ms
  dialTimeout: 5s
  readTimeout: 3s
  writeTimeout: 3s
  poolSize: 10
  minIdleConns: 5

auth:
  jwt_secret: "test-jwt-secret"
  api_keys:
    admin: "test-admin-api-key"
    reader: "test-reader-api-key"

logging:
  level: "${LOG_LEVEL}"
  format: "json"
  outputPaths:
    - "stdout"
  errorOutputPaths:
    - "stderr"

tools:
  mockserver:
    baseURL: "${MOCKSERVER_URL}"
    apiKey: "test-mockserver-key"

performance:
  enableCompression: true
  enableETagCaching: false
  httpMaxIdleConns: 100
  httpMaxConnsPerHost: 100
  httpIdleConnTimeout: 90s

versioning:
  defaultVersion: "v1"
  supportedVersions:
    - "v1"

rateLimit:
  enabled: false
  requestsPerSecond: 100
  burst: 50
