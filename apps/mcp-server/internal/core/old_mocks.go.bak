package core

import (
	"context"
	"time"

	"github.com/S-Corkum/mcp-server/pkg/mcp"
	"github.com/stretchr/testify/mock"
)

// MockDatabase is a mock implementation of the Database interface.
type MockDatabase struct {
	mock.Mock
}

// CreateContext mocks the CreateContext method.
func (m *MockDatabase) CreateContext(ctx context.Context, contextData *mcp.Context) error {
	args := m.Called(ctx, contextData)
	return args.Error(0)
}

// GetContext mocks the GetContext method.
func (m *MockDatabase) GetContext(ctx context.Context, contextID string) (*mcp.Context, error) {
	args := m.Called(ctx, contextID)
	
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	
	return args.Get(0).(*mcp.Context), args.Error(1)
}

// UpdateContext mocks the UpdateContext method.
func (m *MockDatabase) UpdateContext(ctx context.Context, contextData *mcp.Context) error {
	args := m.Called(ctx, contextData)
	return args.Error(0)
}

// DeleteContext mocks the DeleteContext method.
func (m *MockDatabase) DeleteContext(ctx context.Context, contextID string) error {
	args := m.Called(ctx, contextID)
	return args.Error(0)
}

// ListContexts mocks the ListContexts method.
func (m *MockDatabase) ListContexts(ctx context.Context, options *mcp.ContextListOptions) ([]*mcp.Context, error) {
	args := m.Called(ctx, options)
	
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	
	return args.Get(0).([]*mcp.Context), args.Error(1)
}

// MockCache is a mock implementation of the Cache interface.
type MockCache struct {
	mock.Mock
}

// Get mocks the Get method.
func (m *MockCache) Get(ctx context.Context, key string) ([]byte, error) {
	args := m.Called(ctx, key)
	
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	
	return args.Get(0).([]byte), args.Error(1)
}

// Set mocks the Set method.
func (m *MockCache) Set(ctx context.Context, key string, value []byte, ttl time.Duration) error {
	args := m.Called(ctx, key, value, ttl)
	return args.Error(0)
}

// Delete mocks the Delete method.
func (m *MockCache) Delete(ctx context.Context, key string) error {
	args := m.Called(ctx, key)
	return args.Error(0)
}

// Exists mocks the Exists method.
func (m *MockCache) Exists(ctx context.Context, key string) (bool, error) {
	args := m.Called(ctx, key)
	return args.Bool(0), args.Error(1)
}

// Flush mocks the Flush method.
func (m *MockCache) Flush(ctx context.Context) error {
	args := m.Called(ctx)
	return args.Error(0)
}

// MockContextManager is a mock implementation of the ContextManager interface.
type MockContextManager struct {
	mock.Mock
}

// CreateContext mocks the CreateContext method.
func (m *MockContextManager) CreateContext(ctx context.Context, contextData *mcp.Context) (*mcp.Context, error) {
	args := m.Called(ctx, contextData)
	
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	
	return args.Get(0).(*mcp.Context), args.Error(1)
}

// GetContext mocks the GetContext method.
func (m *MockContextManager) GetContext(ctx context.Context, contextID string) (*mcp.Context, error) {
	args := m.Called(ctx, contextID)
	
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	
	return args.Get(0).(*mcp.Context), args.Error(1)
}

// UpdateContext mocks the UpdateContext method.
func (m *MockContextManager) UpdateContext(ctx context.Context, contextID string, updateData *mcp.Context, options *mcp.ContextUpdateOptions) (*mcp.Context, error) {
	args := m.Called(ctx, contextID, updateData, options)
	
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	
	return args.Get(0).(*mcp.Context), args.Error(1)
}

// DeleteContext mocks the DeleteContext method.
func (m *MockContextManager) DeleteContext(ctx context.Context, contextID string) error {
	args := m.Called(ctx, contextID)
	return args.Error(0)
}

// ListContexts mocks the ListContexts method.
func (m *MockContextManager) ListContexts(ctx context.Context, options *mcp.ContextListOptions) ([]*mcp.Context, error) {
	args := m.Called(ctx, options)
	
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	
	return args.Get(0).([]*mcp.Context), args.Error(1)
}

// SummarizeContext mocks the SummarizeContext method.
func (m *MockContextManager) SummarizeContext(ctx context.Context, contextID string) (*mcp.ContextSummary, error) {
	args := m.Called(ctx, contextID)
	
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	
	return args.Get(0).(*mcp.ContextSummary), args.Error(1)
}

// SearchContext mocks the SearchContext method.
func (m *MockContextManager) SearchContext(ctx context.Context, contextID string, query string) (*mcp.ContextSearchResult, error) {
	args := m.Called(ctx, contextID, query)
	
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	
	return args.Get(0).(*mcp.ContextSearchResult), args.Error(1)
}
