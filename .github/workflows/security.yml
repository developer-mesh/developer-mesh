name: Security

on:
  push:
    branches: [ main, 'feature/**' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday

env:
  GO_VERSION: '1.24'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          # WORKAROUND: Disable cache due to go.work issues
          # TODO: Remove when https://github.com/actions/setup-go/issues/482 is fixed
          cache: false

      - name: Install security tools
        run: |
          # Install gosec
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          
          # Install govulncheck (official Go vulnerability scanner)
          go install golang.org/x/vuln/cmd/govulncheck@latest
          
          # Install staticcheck for additional security checks
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run Gosec Security Scanner
        run: |
          # Run gosec on all modules
          echo "Running gosec security scan..."
          gosec -fmt sarif -out gosec-results.sarif ./... || true

      - name: Upload Gosec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif
          category: gosec

      - name: Run govulncheck (Go vulnerability check)
        run: |
          echo "Checking for known vulnerabilities in dependencies..."
          # Run govulncheck for each module to ensure proper scanning
          for module in apps/mcp-server apps/rest-api apps/worker pkg; do
            echo "Scanning $module..."
            (cd "$module" && govulncheck ./...) || exit_code=$?
          done
          
          # Exit with error if vulnerabilities found
          if [ "${exit_code:-0}" -ne 0 ]; then
            echo "::error::Vulnerabilities found in dependencies!"
            exit 1
          fi

      - name: Run staticcheck
        run: |
          echo "Running staticcheck for additional security analysis..."
          # Run staticcheck on all Go code
          staticcheck ./... || echo "::warning::Staticcheck found issues"

  trivy-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        app: [mcp-server, rest-api, worker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: false
          load: true
          tags: devops-mcp/${{ matrix.app }}:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add build args to ensure proper Go workspace handling
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'devops-mcp/${{ matrix.app }}:scan'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.app }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.app }}.sarif'
          category: 'trivy-${{ matrix.app }}'

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          # WORKAROUND: Disable cache due to go.work issues
          # TODO: Remove when https://github.com/actions/setup-go/issues/482 is fixed
          cache: false

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          # Override the default queries to include security-and-quality
          queries: security-and-quality

      - name: Build all applications
        run: |
          # WORKAROUND: CodeQL autobuild doesn't understand Go workspaces
          # Manually build all applications to ensure proper analysis
          echo "Setting up Go workspace..."
          if [ ! -f "go.work" ]; then
            go work init
            for dir in apps/mcp-server apps/rest-api apps/worker pkg; do
              [ -f "$dir/go.mod" ] && go work use "$dir"
            done
          fi
          go work sync
          
          echo "Building all applications..."
          make build-mcp-server
          make build-rest-api
          make build-worker

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

  # license-check:
  #   name: License Check
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #         # WORKAROUND: Disable cache due to go.work issues
  #         # TODO: Remove when https://github.com/actions/setup-go/issues/482 is fixed
  #         cache: false

  #     - name: Install go-licenses
  #       run: go install github.com/google/go-licenses@latest

  #     - name: Check licenses
  #       run: |
  #         echo "Checking licenses for all modules..."
          
  #         # Check each module's licenses
  #         for module in apps/mcp-server apps/rest-api apps/worker; do
  #           echo "Checking licenses in $module..."
  #           (cd "$module" && go-licenses check ./... --disallowed_types=forbidden,restricted) || {
  #             echo "::error::Found problematic licenses in $module"
  #             exit 1
  #           }
  #         done
          
  #         echo "All license checks passed!"