name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_without_v=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$PREV_TAG"..HEAD | grep -E "^- (feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)" || echo "No conventional commits found")
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" | grep -E "^- (feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)" || echo "No conventional commits found")
          fi
          
          # Save to file for multi-line handling
          echo "$CHANGELOG" > changelog.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in ${{ steps.version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            
            Docker images for this release are available at:
            ```bash
            docker pull ghcr.io/${{ github.repository_owner }}/devops-mcp-mcp-server:${{ steps.version.outputs.version }}
            docker pull ghcr.io/${{ github.repository_owner }}/devops-mcp-rest-api:${{ steps.version.outputs.version }}
            docker pull ghcr.io/${{ github.repository_owner }}/devops-mcp-worker:${{ steps.version.outputs.version }}
            docker pull ghcr.io/${{ github.repository_owner }}/devops-mcp-mockserver:${{ steps.version.outputs.version }}
            ```
            
            ## Installation
            
            See the [Quick Start Guide](https://github.com/${{ github.repository }}/blob/main/README.md#-quick-start) for installation instructions.
            
            ## What's Next
            
            Check our [roadmap](https://github.com/${{ github.repository }}/issues?q=is%3Aopen+is%3Aissue+label%3Aroadmap) for upcoming features.
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        app: [mcp-server, rest-api, worker]
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Setup Go workspace
        run: |
          go work init
          go work use ./apps/${{ matrix.app }}
          go work use ./pkg
          go work sync

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          cd apps/${{ matrix.app }}
          
          # Set output extension for Windows
          EXT=""
          if [ "${{ matrix.os }}" = "windows" ]; then
            EXT=".exe"
          fi
          
          # Build with version info
          go build -ldflags="-w -s -X main.Version=${{ needs.create-release.outputs.version }} -X main.GitCommit=${{ github.sha }} -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o ${{ matrix.app }}-${{ matrix.os }}-${{ matrix.arch }}${EXT} \
            ./cmd/*
          
          # Create tarball/zip
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip ${{ matrix.app }}-${{ matrix.os }}-${{ matrix.arch }}.zip ${{ matrix.app }}-${{ matrix.os }}-${{ matrix.arch }}${EXT}
          else
            tar czf ${{ matrix.app }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz ${{ matrix.app }}-${{ matrix.os }}-${{ matrix.arch }}
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./apps/${{ matrix.app }}/${{ matrix.app }}-${{ matrix.os }}-${{ matrix.arch }}.${{ matrix.os == 'windows' && 'zip' || 'tar.gz' }}
          asset_name: ${{ matrix.app }}-${{ matrix.os }}-${{ matrix.arch }}.${{ matrix.os == 'windows' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows' && 'application/zip' || 'application/gzip' }}

  trigger-docker-publish:
    name: Trigger Docker Publish
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Trigger Docker Publish Workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docker-publish.yml',
              ref: context.ref,
              inputs: {
                tag: '${{ needs.create-release.outputs.version }}'
              }
            })

  generate-checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries]
    
    steps:
      - name: Download all artifacts
        run: |
          # Download release assets
          curl -sL https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.create-release.outputs.version }} | \
            jq -r '.assets[].browser_download_url' | \
            grep -E '\.(tar\.gz|zip)$' | \
            xargs -n 1 curl -sLO

      - name: Generate checksums
        run: |
          sha256sum *.tar.gz *.zip > checksums.txt
          cat checksums.txt

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain