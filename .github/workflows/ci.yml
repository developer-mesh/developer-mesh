name: CI

on:
  push:
    branches: [ main, 'feature/**' ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'
  DOCKER_BUILDKIT: 1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: devops_mcp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Create test environment file
        run: |
          cat > .env.test <<EOF
          DATABASE_HOST=localhost
          DATABASE_PORT=5432
          DATABASE_USER=test
          DATABASE_PASSWORD=test
          DATABASE_NAME=devops_mcp_test
          DATABASE_SSL_MODE=disable
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_ADDR=localhost:6379
          JWT_SECRET=test-jwt-secret-for-ci-testing-minimum-32-chars
          ADMIN_API_KEY=test-admin-key-1234567890
          ENVIRONMENT=test
          EOF

      - name: Run unit tests
        run: make test
        env:
          DATABASE_DSN: postgres://test:test@localhost:5432/devops_mcp_test?sslmode=disable
          REDIS_ADDR: localhost:6379

      - name: Generate coverage report
        run: make test-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: devops_mcp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Create test environment file
        run: |
          cp .env.example .env
          echo "DATABASE_HOST=localhost" >> .env
          echo "DATABASE_PORT=5432" >> .env
          echo "DATABASE_USER=test" >> .env
          echo "DATABASE_PASSWORD=test" >> .env
          echo "DATABASE_NAME=devops_mcp_test" >> .env
          echo "REDIS_ADDR=localhost:6379" >> .env

      - name: Run integration tests
        run: make test-integration
        env:
          ENABLE_INTEGRATION_TESTS: true
          DATABASE_DSN: postgres://test:test@localhost:5432/devops_mcp_test?sslmode=disable
          REDIS_ADDR: localhost:6379

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        app: [mcp-server, rest-api, worker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build ${{ matrix.app }}
        run: make build-${{ matrix.app }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-binary
          path: apps/${{ matrix.app }}/${{ matrix.app }}

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        app: [mcp-server, rest-api, worker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: false
          tags: devops-mcp/${{ matrix.app }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  functional-test:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          docker-compose -f docker-compose.local.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run functional tests
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make test-functional
        env:
          MCP_SERVER_URL: http://localhost:8080
          REST_API_URL: http://localhost:8081
          MCP_API_KEY: dev-admin-key-1234567890
          ADMIN_API_KEY: dev-admin-key-1234567890

      - name: Collect logs on failure
        if: failure()
        run: |
          docker-compose -f docker-compose.local.yml logs
          
      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.local.yml down -v