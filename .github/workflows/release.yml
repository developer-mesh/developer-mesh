name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
        pattern: '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$'

env:
  GO_VERSION: '1.24.4'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_PREFIX: ${{ github.repository_owner }}

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          # Validate semantic version format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "Error: Version '$VERSION' does not follow semantic versioning (e.g., 1.0.0 or 1.0.0-beta.1)"
            exit 1
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Extract the changelog section for this version
          CHANGELOG=$(awk -v ver="## \\[${VERSION}\\]" '
            BEGIN { found = 0 }
            $0 ~ ver { found = 1; next }
            found && /^## \[/ { exit }
            found { print }
          ' CHANGELOG.md)
          
          # If no changelog found, create a generic one
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG=$(cat <<'EOF'
Release ${VERSION}

Changes in this release:
- See commit history for details
EOF
            )
          fi
          
          # Save to file for multi-line handling
          echo "$CHANGELOG" > changelog_body.md
          
          # Set output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: changelog_body.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: prepare-release
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [mcp-server, rest-api, worker]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/developer-mesh-${{ matrix.app }}
          tags: |
            type=raw,value=${{ needs.prepare-release.outputs.version }}
            type=raw,value=latest,enable=${{ !contains(needs.prepare-release.outputs.version, '-') }}
            type=semver,pattern={{version}},value=${{ needs.prepare-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare-release.outputs.version }},enable=${{ !contains(needs.prepare-release.outputs.version, '-') }}
            type=semver,pattern={{major}},value=${{ needs.prepare-release.outputs.version }},enable=${{ !contains(needs.prepare-release.outputs.version, '-') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp || github.run_started_at }}
            COMMIT_SHA=${{ github.sha }}
          platforms: linux/amd64,linux/arm64

  update-changelog:
    name: Update Changelog
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-push]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Check if version already exists in changelog
          if grep -q "## \[${VERSION}\]" CHANGELOG.md; then
            echo "Version ${VERSION} already exists in CHANGELOG.md"
            exit 0
          fi
          
          # Create a temporary file with the new entry
          cat > new_entry.md << EOF
          ## [${VERSION}] - ${DATE}
          
          ### Added
          - New features and improvements
          
          ### Changed
          - Updates and modifications
          
          ### Fixed
          - Bug fixes and corrections
          
          ### Security
          - Security updates if any
          
          EOF
          
          # Insert the new entry after the [Unreleased] section
          awk '/^## \[Unreleased\]/ {print; getline; print; print ""; while ((getline line < "new_entry.md") > 0) print line; close("new_entry.md")} {print}' CHANGELOG.md > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md
          
          # Update the links section at the bottom
          REPO_URL="https://github.com/${{ github.repository }}"
          PREV_VERSION=$(grep -E "^\[.*\]: ${REPO_URL}" CHANGELOG.md | grep -v Unreleased | head -1 | sed 's/^\[\(.*\)\]:.*/\1/')
          
          # Add the new version link
          echo "[${VERSION}]: ${REPO_URL}/compare/${PREV_VERSION}...${VERSION}" >> CHANGELOG.md
          
          # Commit the changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md for ${VERSION} [skip ci]"
          git push origin HEAD:main

  create-release-summary:
    name: Create Release Summary
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-push]
    permissions:
      contents: write
      issues: write
    steps:
      - name: Create summary comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number || 1 }}
          body: |
            ## ðŸš€ Release ${{ needs.prepare-release.outputs.version }} Published!
            
            ### Docker Images Published to GHCR:
            - `ghcr.io/${{ env.DOCKER_IMAGE_PREFIX }}/developer-mesh-mcp-server:${{ needs.prepare-release.outputs.version }}`
            - `ghcr.io/${{ env.DOCKER_IMAGE_PREFIX }}/developer-mesh-rest-api:${{ needs.prepare-release.outputs.version }}`
            - `ghcr.io/${{ env.DOCKER_IMAGE_PREFIX }}/developer-mesh-worker:${{ needs.prepare-release.outputs.version }}`
            
            ### Pull Images:
            ```bash
            docker pull ghcr.io/${{ env.DOCKER_IMAGE_PREFIX }}/developer-mesh-mcp-server:${{ needs.prepare-release.outputs.version }}
            docker pull ghcr.io/${{ env.DOCKER_IMAGE_PREFIX }}/developer-mesh-rest-api:${{ needs.prepare-release.outputs.version }}
            docker pull ghcr.io/${{ env.DOCKER_IMAGE_PREFIX }}/developer-mesh-worker:${{ needs.prepare-release.outputs.version }}
            ```
            
            ### Release Notes:
            [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }})