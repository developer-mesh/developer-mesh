# DevOps MCP Environment Variables Template
# Copy this file to .env and fill in your values for local development
# 
# This file contains ALL possible environment variables with:
# - Default values for local development
# - Commented examples for Docker and production environments
# - Detailed descriptions for each variable

# ============================================================================
# CORE APPLICATION SETTINGS
# ============================================================================

# Environment name (development, staging, production)
ENVIRONMENT=development

# Application version
APP_VERSION=1.0.0

# Server port for the API
API_PORT=8080
API_HOST=0.0.0.0

# MCP Server URL
# Local: http://localhost:8080
# Docker: http://mcp-server:8080
# Production: https://api.your-domain.com
MCP_SERVER_URL=http://localhost:8080

# ============================================================================
# AUTHENTICATION & SECURITY
# ============================================================================

# JWT secret for token signing (minimum 32 characters)
# Generate with: openssl rand -base64 32
JWT_SECRET=your-jwt-secret-minimum-32-characters-change-me

# API Keys for service authentication
# Development values shown, use secrets manager in production
ADMIN_API_KEY=dev-admin-key-1234567890
READER_API_KEY=dev-readonly-key-1234567890
MCP_API_KEY=dev-mcp-api-key-1234567890

# Authentication requirements
REQUIRE_AUTH=false
REQUIRE_MFA=false

# IP whitelist (comma-separated, leave empty to disable)
IP_WHITELIST=

# Credential encryption key (32 characters)
CREDENTIAL_ENCRYPTION_KEY=dev-encryption-key-32-characters!

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# Database driver
DATABASE_DRIVER=postgres

# Database connection details
# Local development (native)
DATABASE_HOST=localhost
# Docker development
# DATABASE_HOST=database
# Production: Use RDS endpoint
# DATABASE_HOST=your-db.region.rds.amazonaws.com

DATABASE_PORT=5432
DATABASE_NAME=dev
DATABASE_USER=dev
DATABASE_PASSWORD=dev
DATABASE_SSL_MODE=disable

# Full DSN (overrides individual settings if provided)
# Local: postgres://dev:dev@localhost:5432/dev?sslmode=disable
# Docker: postgres://dev:dev@database:5432/dev?sslmode=disable
# Production: Use RDS with SSL
DATABASE_DSN=postgres://dev:dev@localhost:5432/dev?sslmode=disable

# Connection pool settings
DB_MAX_OPEN_CONNS=100
DB_MAX_IDLE_CONNS=25

# Production RDS settings (when using AWS RDS)
# RDS_HOST=
# RDS_USERNAME=
# RDS_PASSWORD=
# RDS_DATABASE=
# USE_IAM_AUTH=true
# USE_READ_REPLICAS=true
# READ_REPLICA_HOSTS=

# ============================================================================
# CACHE CONFIGURATION (Redis)
# ============================================================================

# Cache type (redis, memory)
CACHE_TYPE=redis

# Redis connection
# Local development
REDIS_HOST=localhost
# Docker development
# REDIS_HOST=redis
# Production: Use ElastiCache endpoint
# REDIS_HOST=cluster.cache.amazonaws.com

REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Redis address (alternative format)
# Local: localhost:6379
# Docker: redis:6379
REDIS_ADDR=localhost:6379

# Redis pool settings
REDIS_POOL_SIZE=100
REDIS_MIN_IDLE=20

# ElastiCache settings (AWS production)
# ELASTICACHE_ENDPOINT=
# ELASTICACHE_PORT=6379
# ELASTICACHE_USERNAME=
# ELASTICACHE_PASSWORD=
# ELASTICACHE_AUTH_TOKEN=

# ============================================================================
# AWS CONFIGURATION
# ============================================================================

AWS_REGION=us-west-2
AWS_ACCESS_KEY_ID=test
AWS_SECRET_ACCESS_KEY=test

# LocalStack endpoint for local development
# Comment out for real AWS usage
AWS_ENDPOINT_URL=http://localhost:4566
# Docker: http://localstack:4566

# AWS Account ID (production only)
# AWS_ACCOUNT_ID=

# ============================================================================
# S3 STORAGE
# ============================================================================

S3_BUCKET=mcp-contexts

# S3 endpoint
# Local (LocalStack): http://localhost:4566
# Docker: http://localstack:4566
# Production: Leave empty to use default AWS endpoint
S3_ENDPOINT=http://localhost:4566

# Use path-style addressing (required for LocalStack)
S3_USE_PATH_STYLE=true

# Production S3 settings
# S3_KMS_KEY_ID=

# ============================================================================
# GITHUB INTEGRATION
# ============================================================================

# GitHub personal access token or app token
GITHUB_TOKEN=${GITHUB_TOKEN:-your-github-token}

# GitHub webhook secret
GITHUB_WEBHOOK_SECRET=your-webhook-secret

# Default GitHub organization and repository
GITHUB_OWNER=${GITHUB_OWNER:-your-org}
GITHUB_REPO=${GITHUB_REPO:-your-repo}

# GitHub API URL
# Public GitHub: https://api.github.com
# GitHub Enterprise: https://github.your-company.com/api/v3
GITHUB_API_URL=https://api.github.com

# GitHub App configuration (if using GitHub App instead of PAT)
GITHUB_APP_ID=
GITHUB_INSTALLATION_ID=
GITHUB_PRIVATE_KEY_PATH=

# Mock GitHub for testing
USE_GITHUB_MOCK=false

# Service tokens (optional)
GITHUB_SERVICE_TOKEN=${GITHUB_SERVICE_TOKEN:-}

# ============================================================================
# EXTERNAL INTEGRATIONS
# ============================================================================

# SonarQube
SONARQUBE_URL=http://localhost:9000
SONARQUBE_TOKEN=your-sonarqube-token
SONARQUBE_SERVICE_TOKEN=${SONARQUBE_SERVICE_TOKEN:-}

# Mock server (for testing)
MOCKSERVER_URL=http://localhost:8081
# Docker: http://mockserver:8081
MOCK_RESPONSES_ENABLED=false

# ============================================================================
# VECTOR SEARCH CONFIGURATION
# ============================================================================

VECTOR_ENABLED=true
VECTOR_DEFAULT_MODEL=text-embedding-ada-002
VECTOR_DEFAULT_DIMENSION=1536

# OpenAI API key (for embeddings)
OPENAI_API_KEY=${OPENAI_API_KEY:-}

# Alternative embedding providers
# ANTHROPIC_API_KEY=
# BEDROCK_ACCESS_KEY_ID=
# BEDROCK_SECRET_ACCESS_KEY=

# ============================================================================
# WORKER CONFIGURATION
# ============================================================================

# Queue type (memory, sqs)
WORKER_QUEUE_TYPE=memory
# Production: sqs

# Worker concurrency
WORKER_CONCURRENCY=5

# SQS configuration
# Local (LocalStack): http://localhost:4566/000000000000/mcp-events
# Docker: http://localstack:4566/000000000000/mcp-events
# Production: https://sqs.region.amazonaws.com/account-id/queue-name
SQS_QUEUE_URL=http://localhost:4566/000000000000/mcp-events

# ============================================================================
# MONITORING & OBSERVABILITY
# ============================================================================

# Logging
LOG_LEVEL=info
# Development: debug
# Production: info or warn
LOG_FORMAT=json

# Metrics
PROMETHEUS_ENABLED=true
METRICS_PATH=/metrics
METRICS_AUTH_TOKEN=

# Tracing
TRACING_ENABLED=false
TRACING_PROVIDER=jaeger
TRACING_ENDPOINT=
TRACING_SAMPLE_RATE=0.1

# ============================================================================
# SECURITY & RATE LIMITING
# ============================================================================

# CORS settings
CORS_ENABLED=true
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
# Production example: https://app.example.com,https://admin.example.com

# Rate limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_PERIOD=1m
RATE_LIMIT_DEFAULT_MAX=1000
RATE_LIMIT_WINDOW=1m

# TLS (production only)
# TLS_ENABLED=true
# TLS_CERT_FILE=/etc/tls/tls.crt
# TLS_KEY_FILE=/etc/tls/tls.key

# Request signing
# REQUEST_SIGNING_ENABLED=true

# Secrets management (production)
# SECRETS_PROVIDER=aws-secrets-manager
# SECRETS_PREFIX=devops-mcp/

# ============================================================================
# FEATURE FLAGS
# ============================================================================

FEATURE_WEBHOOKS_ENABLED=true
FEATURE_VECTOR_SEARCH_ENABLED=true
FEATURE_GITHUB_INTEGRATION_ENABLED=true
ENABLE_EXPERIMENTAL_FEATURES=false
ENABLE_DEBUG_ENDPOINTS=true

# ============================================================================
# HIGH AVAILABILITY (Production)
# ============================================================================

# HA_ENABLED=true
# WORKER_POOL_SIZE=20
# MAX_CONCURRENT_OPS=50

# ============================================================================
# COMPLIANCE & DATA RESIDENCY (Production)
# ============================================================================

# DATA_RESIDENCY_ENABLED=true
# ALLOWED_REGIONS=us-west-2,eu-west-1

# ============================================================================
# ALERTING (Production)
# ============================================================================

# PAGERDUTY_TOKEN=
# SLACK_WEBHOOK_URL=
# ALERT_EMAIL=ops@example.com

# ============================================================================
# DEPLOYMENT (Production)
# ============================================================================

# DEPLOYMENT_ID=
# CANARY_ENABLED=false
# CANARY_PERCENTAGE=0

# ============================================================================
# DOCKER COMPOSE SPECIFIC
# ============================================================================

# These are used by docker-compose.yml but not by the application
COMPOSE_PROJECT_NAME=devops-mcp
DOCKER_BUILDKIT=1
COMPOSE_DOCKER_CLI_BUILD=1

# ============================================================================
# DEVELOPMENT TOOLS
# ============================================================================

# Hot reload for development
HOT_RELOAD=true

# Enable additional debug endpoints
ENABLE_DEBUG_ENDPOINTS=true

# Use mock services for development
USE_MOCK_SERVICES=false