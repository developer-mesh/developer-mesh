      - name: Deploy Services (Fixed)
        id: deploy
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "Deploying with image tag: main-${SHORT_SHA}"
          
          # Create deployment script with proper fixes
          DEPLOY_SCRIPT=$(cat << 'SCRIPT_END' | base64 -w 0
          #!/bin/bash
          set -e
          cd /home/ec2-user/developer-mesh
          
          # Set image tag
          SHORT_SHA="${SHORT_SHA}"
          export IMAGE_TAG="main-${SHORT_SHA}"
          echo "Using image tag: ${IMAGE_TAG}"
          
          # Login to GitHub Container Registry
          echo "Logging into GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          if [ $? -ne 0 ]; then
            echo "ERROR: Docker login failed"
            exit 1
          fi
          
          # Also persist to .env for future restarts
          if ! grep -q "IMAGE_TAG=" .env; then
            echo "IMAGE_TAG=main-${SHORT_SHA}" >> .env
          else
            sed -i "s/IMAGE_TAG=.*/IMAGE_TAG=main-${SHORT_SHA}/" .env
          fi
          
          # Clean up old containers first
          echo "Cleaning up old containers..."
          docker stop mcp-server rest-api worker 2>/dev/null || true
          docker rm mcp-server rest-api worker 2>/dev/null || true
          
          # Stop existing containers via docker-compose
          echo "Stopping existing containers..."
          docker-compose down || true
          
          # Pull new images
          echo "Pulling new images..."
          docker-compose pull
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to pull images"
            exit 1
          fi
          
          # Start new containers
          echo "Starting new containers..."
          docker-compose up -d
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to start containers"
            exit 1
          fi
          
          # Wait for containers to start
          echo "Waiting for containers to start..."
          sleep 30
          
          # Check container status
          echo "Container status:"
          docker ps
          
          # Verify all containers are running
          CONTAINERS_RUNNING=true
          for container in mcp-server rest-api worker; do
            if docker ps | grep -q "${container}"; then
              echo "✓ ${container} is running"
            else
              echo "✗ ${container} is not running"
              echo "Recent logs for ${container}:"
              docker logs "${container}" --tail 50 2>&1 || true
              CONTAINERS_RUNNING=false
            fi
          done
          
          # Exit with error if containers aren't running
          if [ "${CONTAINERS_RUNNING}" = "false" ]; then
            echo "ERROR: Not all containers are running"
            docker-compose ps
            exit 1
          fi
          
          echo "Deployment complete - all containers running"
          SCRIPT_END
          )
          
          # Fix the SCRIPT_END marker and SHORT_SHA substitution
          DEPLOY_SCRIPT=$(echo "$DEPLOY_SCRIPT" | sed "s/\${SHORT_SHA}/${SHORT_SHA}/g")
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"echo '${DEPLOY_SCRIPT}' | base64 -d > /tmp/deploy-services.sh\",
              \"chmod +x /tmp/deploy-services.sh\",
              \"bash /tmp/deploy-services.sh\",
              \"rm -f /tmp/deploy-services.sh\"
            ]" \
            --query "Command.CommandId" \
            --output text)
          
          # Wait for completion and check status
          if ! aws ssm wait command-executed \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}"; then
            echo "Deployment command failed or timed out"
            
            # Get command output for debugging
            aws ssm get-command-invocation \
              --command-id "${COMMAND_ID}" \
              --instance-id "${{ steps.get-instance.outputs.instance_id }}" \
              --query '[Status,StandardOutputContent,StandardErrorContent]' \
              --output text || true
            
            exit 1
          fi
          
          # Check if command succeeded
          STATUS=$(aws ssm get-command-invocation \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}" \
            --query "Status" \
            --output text)
          
          if [ "${STATUS}" != "Success" ]; then
            echo "Deployment failed with status: ${STATUS}"
            
            # Get error output
            aws ssm get-command-invocation \
              --command-id "${COMMAND_ID}" \
              --instance-id "${{ steps.get-instance.outputs.instance_id }}" \
              --query "StandardErrorContent" \
              --output text || true
            
            exit 1
          fi
          
          echo "Deployment command completed successfully"