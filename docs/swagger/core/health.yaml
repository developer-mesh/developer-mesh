paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: |
        Returns the health status of all system components. This endpoint is used for
        monitoring and load balancer health checks. It does not require authentication.
      operationId: healthCheck
      security: []  # No authentication required
      parameters:
        - name: verbose
          in: query
          description: Include detailed component information
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                healthy:
                  summary: All components healthy
                  value:
                    status: "healthy"
                    timestamp: "2024-01-15T10:00:00Z"
                    components:
                      database: "healthy"
                      cache: "healthy"
                      context_manager: "healthy"
                      rest_api_client: "healthy"
                      vector_database: "healthy"
                    version: "1.0.0"
                    uptime: 3600
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                unhealthy:
                  summary: Some components unhealthy
                  value:
                    status: "unhealthy"
                    timestamp: "2024-01-15T10:00:00Z"
                    components:
                      database: "healthy"
                      cache: "unhealthy"
                      context_manager: "healthy"
                      rest_api_client: "healthy"
                      vector_database: "degraded"
                    errors:
                      - component: "cache"
                        error: "Connection timeout"
                      - component: "vector_database"
                        error: "High latency detected"

  /healthz:
    get:
      tags:
        - Health
      summary: Kubernetes liveness probe
      description: |
        Kubernetes liveness probe endpoint. Returns a simple 200 OK if the service
        is alive. This endpoint does not require authentication.
      operationId: healthzCheck
      security: []  # No authentication required
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                    example: "ok"
        '503':
          description: Service is not alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [error]
                    example: "error"

  /readyz:
    get:
      tags:
        - Health
      summary: Kubernetes readiness probe
      description: |
        Kubernetes readiness probe endpoint. Returns 200 OK when the service is ready
        to accept traffic. This endpoint does not require authentication.
      operationId: readyzCheck
      security: []  # No authentication required
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ready]
                    example: "ready"
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [not_ready]
                    example: "not_ready"
                  reason:
                    type: string
                    description: Reason for not being ready
                    example: "Database connection not established"

  /swagger/{proxy}:
    get:
      tags:
        - Health
      summary: Swagger UI
      description: |
        Serves the Swagger UI documentation interface. The {proxy} parameter catches
        all sub-paths to serve static assets.
      operationId: swaggerUI
      security: []  # No authentication required
      parameters:
        - name: proxy
          in: path
          required: true
          description: Path to swagger UI resources
          schema:
            type: string
      responses:
        '200':
          description: Swagger UI HTML or assets
          content:
            text/html:
              schema:
                type: string
            application/javascript:
              schema:
                type: string
            text/css:
              schema:
                type: string

  /redoc:
    get:
      tags:
        - Health
      summary: ReDoc documentation
      description: |
        Serves the ReDoc documentation interface as an alternative to Swagger UI.
      operationId: redocUI
      security: []  # No authentication required
      responses:
        '200':
          description: ReDoc HTML page
          content:
            text/html:
              schema:
                type: string

  /ws:
    get:
      tags:
        - WebSocket
      summary: WebSocket connection
      description: |
        Establishes a WebSocket connection for real-time bidirectional communication.
        This endpoint is used for MCP (Model Context Protocol) communication.
      operationId: websocket
      security: []  # Authentication handled via WebSocket protocol
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '400':
          description: Bad Request - Invalid WebSocket handshake
        '401':
          description: Unauthorized - Invalid authentication

  /metrics:
    get:
      tags:
        - Health
      summary: Prometheus metrics
      description: |
        Returns metrics in Prometheus exposition format. This endpoint is used by
        Prometheus scrapers and does not require authentication.
      operationId: getMetrics
      security: []  # No authentication required
      produces:
        - text/plain
      responses:
        '200':
          description: Metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string
              example: |
                # HELP http_requests_total Total HTTP requests
                # TYPE http_requests_total counter
                http_requests_total{method="GET",path="/api/v1/health",status="200"} 1234
                http_requests_total{method="POST",path="/api/v1/tools/github/actions/create_issue",status="200"} 456
                
                # HELP http_request_duration_seconds HTTP request latency
                # TYPE http_request_duration_seconds histogram
                http_request_duration_seconds_bucket{le="0.1"} 1000
                http_request_duration_seconds_bucket{le="0.5"} 1200
                http_request_duration_seconds_bucket{le="1.0"} 1300
                http_request_duration_seconds_sum 567.89
                http_request_duration_seconds_count 1300

  /ready:
    get:
      tags:
        - Health
      summary: Readiness check
      description: |
        Indicates if the service is ready to accept requests. Used by Kubernetes
        for readiness probes. Returns 503 during startup or maintenance.
      operationId: readinessCheck
      security: []  # No authentication required
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Service is ready to accept requests"
        '503':
          description: Service not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Service is starting up"
                  retry_after:
                    type: integer
                    description: Seconds to wait before retry
                    example: 5

  /live:
    get:
      tags:
        - Health
      summary: Liveness check
      description: |
        Indicates if the service is alive and functioning. Used by Kubernetes
        for liveness probes. Returns 503 if the service is in a broken state.
      operationId: livenessCheck
      security: []  # No authentication required
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: boolean
                    example: true
                  timestamp:
                    $ref: '../common/schemas.yaml#/components/schemas/Timestamp'
        '503':
          description: Service is not functioning properly
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Deadlock detected"

components:
  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - components
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
          description: Overall system health
          example: "healthy"
        timestamp:
          $ref: '../common/schemas.yaml#/components/schemas/Timestamp'
        components:
          type: object
          additionalProperties:
            type: string
          description: Individual component health status
          example:
            database: "healthy"
            cache: "healthy"
            context_manager: "healthy"
        version:
          type: string
          description: API version
          example: "1.0.0"
        uptime:
          type: integer
          description: Service uptime in seconds
          example: 3600
        errors:
          type: array
          items:
            type: object
            properties:
              component:
                type: string
              error:
                type: string
          description: Error details for unhealthy components
        metrics:
          type: object
          properties:
            requests_per_second:
              type: number
              format: float
            average_latency_ms:
              type: number
              format: float
            active_connections:
              type: integer
            memory_usage_mb:
              type: number
              format: float
            cpu_usage_percent:
              type: number
              format: float
          description: Basic performance metrics (if verbose=true)

