paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: |
        Returns the health status of all system components. This endpoint is used for
        monitoring and load balancer health checks. It does not require authentication.
      operationId: healthCheck
      security: []  # No authentication required
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                healthy:
                  summary: All components healthy
                  value:
                    status: "healthy"
                    ready: true
                    time: "2024-01-15T10:00:00Z"
                    components:
                      database: "healthy"
                    checks:
                      database: "healthy"
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                unhealthy:
                  summary: Some components unhealthy
                  value:
                    status: "unhealthy"
                    ready: false
                    time: "2024-01-15T10:00:00Z"
                    components:
                      database: "unhealthy: connection refused"
                    checks:
                      database: "unhealthy: connection refused"

  /healthz:
    get:
      tags:
        - Health
      summary: Kubernetes liveness probe
      description: |
        Kubernetes liveness probe endpoint. Returns a simple 200 OK if the service
        is alive. This endpoint does not require authentication.
      operationId: healthzCheck
      security: []  # No authentication required
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - time
                properties:
                  status:
                    type: string
                    enum: [alive]
                    example: "alive"
                  time:
                    type: string
                    format: date-time
                    description: Current time in RFC3339 format
                    example: "2024-01-15T10:00:00Z"

  /readyz:
    get:
      tags:
        - Health
      summary: Kubernetes readiness probe
      description: |
        Kubernetes readiness probe endpoint. Returns 200 OK when the service is ready
        to accept traffic. This endpoint does not require authentication.
      operationId: readyzCheck
      security: []  # No authentication required
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - time
                properties:
                  status:
                    type: string
                    enum: [ready]
                    example: "ready"
                  time:
                    type: string
                    format: date-time
                    description: Current time in RFC3339 format
                    example: "2024-01-15T10:00:00Z"
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum: [not_ready]
                        example: "not_ready"
                      error:
                        type: string
                        description: Error message when service is starting up
                        example: "Service is starting up"
                  - type: object
                    required:
                      - status
                      - errors
                    properties:
                      status:
                        type: string
                        enum: [unhealthy]
                        example: "unhealthy"
                      errors:
                        type: object
                        additionalProperties:
                          type: string
                        description: Map of component names to error messages
                        example:
                          database: "connection refused"

  /swagger/{any}:
    get:
      tags:
        - Health
      summary: Swagger UI
      description: |
        Serves the Swagger UI documentation interface. The {proxy} parameter catches
        all sub-paths to serve static assets.
      operationId: swaggerUI
      security: []  # No authentication required
      parameters:
        - name: any
          in: path
          required: true
          description: Path to swagger UI resources
          schema:
            type: string
      responses:
        '200':
          description: Swagger UI HTML or assets
          content:
            text/html:
              schema:
                type: string
            application/javascript:
              schema:
                type: string
            text/css:
              schema:
                type: string

  /metrics:
    get:
      tags:
        - Health
      summary: Prometheus metrics
      description: |
        Returns metrics in Prometheus exposition format. This endpoint is used by
        Prometheus scrapers and does not require authentication.
      operationId: getMetrics
      security: []  # No authentication required
      responses:
        '200':
          description: Metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string
              example: |
                # HELP http_requests_total Total HTTP requests
                # TYPE http_requests_total counter
                http_requests_total{method="GET",path="/api/v1/health",status="200"} 1234
                http_requests_total{method="POST",path="/api/v1/tools/github/actions/create_issue",status="200"} 456
                
                # HELP http_request_duration_seconds HTTP request latency
                # TYPE http_request_duration_seconds histogram
                http_request_duration_seconds_bucket{le="0.1"} 1000
                http_request_duration_seconds_bucket{le="0.5"} 1200
                http_request_duration_seconds_bucket{le="1.0"} 1300
                http_request_duration_seconds_sum 567.89
                http_request_duration_seconds_count 1300

  /ready:
    get:
      tags:
        - Health
      summary: Readiness check
      description: |
        Indicates if the service is ready to accept requests. Used by Kubernetes
        for readiness probes. Returns 503 during startup or maintenance.
      operationId: readinessCheck
      security: []  # No authentication required
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Service is ready to accept requests"
        '503':
          description: Service not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Service is starting up"
                  retry_after:
                    type: integer
                    description: Seconds to wait before retry
                    example: 5

  /live:
    get:
      tags:
        - Health
      summary: Liveness check
      description: |
        Indicates if the service is alive and functioning. Used by Kubernetes
        for liveness probes. Returns 503 if the service is in a broken state.
      operationId: livenessCheck
      security: []  # No authentication required
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: boolean
                    example: true
                  timestamp:
                    $ref: '../common/schemas.yaml#/components/schemas/Timestamp'
        '503':
          description: Service is not functioning properly
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Deadlock detected"

components:
  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - ready
        - time
        - components
        - checks
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Overall system health
          example: "healthy"
        ready:
          type: boolean
          description: Whether the service is ready to accept traffic
          example: true
        time:
          type: string
          format: date-time
          description: Current time in RFC3339 format
          example: "2024-01-15T10:00:00Z"
        components:
          type: object
          additionalProperties:
            type: string
          description: Individual component health status
          example:
            database: "healthy"
        checks:
          type: object
          additionalProperties:
            type: string
          description: Same as components (kept for backward compatibility)
          example:
            database: "healthy"

