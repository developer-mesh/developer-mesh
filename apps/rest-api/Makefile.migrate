# Migration configuration
DB_HOST ?= localhost
DB_PORT ?= 5432
DB_USER ?= dev
DB_PASS ?= dev
DB_NAME ?= dev
DB_SSLMODE ?= disable

# Build DSN
DSN := postgres://$(DB_USER):$(DB_PASS)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=$(DB_SSLMODE)

# Migration directory
MIGRATION_DIR := ./migrations/sql

# Colors for output
GREEN := \033[0;32m
RED := \033[0;31m
NC := \033[0m # No Color

.PHONY: help
help:
	@echo "Migration Management Commands:"
	@echo "  make migrate-up         - Run all pending migrations"
	@echo "  make migrate-down       - Rollback last migration"
	@echo "  make migrate-version    - Show current migration version"
	@echo "  make migrate-create     - Create new migration (NAME required)"
	@echo "  make migrate-force      - Force to specific version (VERSION required)"
	@echo "  make migrate-validate   - Validate migration files"
	@echo "  make migrate-reset      - Reset database (DANGEROUS)"

.PHONY: migrate-up
migrate-up:
	@echo "$(GREEN)Running migrations...$(NC)"
	@migrate -path $(MIGRATION_DIR) -database "$(DSN)" up
	@echo "$(GREEN)Migrations completed!$(NC)"

.PHONY: migrate-down
migrate-down:
	@echo "$(RED)Rolling back last migration...$(NC)"
	@migrate -path $(MIGRATION_DIR) -database "$(DSN)" down 1
	@echo "$(GREEN)Rollback completed!$(NC)"

.PHONY: migrate-version
migrate-version:
	@echo "$(GREEN)Current migration version:$(NC)"
	@migrate -path $(MIGRATION_DIR) -database "$(DSN)" version

.PHONY: migrate-create
migrate-create:
	@if [ -z "$(NAME)" ]; then \
		echo "$(RED)Error: NAME is required$(NC)"; \
		echo "Usage: make migrate-create NAME=your_migration_name"; \
		exit 1; \
	fi
	@migrate create -ext sql -dir $(MIGRATION_DIR) -seq $(NAME)
	@echo "$(GREEN)Created migration: $(NAME)$(NC)"

.PHONY: migrate-force
migrate-force:
	@if [ -z "$(VERSION)" ]; then \
		echo "$(RED)Error: VERSION is required$(NC)"; \
		echo "Usage: make migrate-force VERSION=3"; \
		exit 1; \
	fi
	@echo "$(RED)Forcing to version $(VERSION)...$(NC)"
	@migrate -path $(MIGRATION_DIR) -database "$(DSN)" force $(VERSION)
	@echo "$(GREEN)Forced to version $(VERSION)!$(NC)"

.PHONY: migrate-validate
migrate-validate:
	@echo "$(GREEN)Validating migration files...$(NC)"
	@migrate -path $(MIGRATION_DIR) -database "$(DSN)" version >/dev/null 2>&1 || \
		(echo "$(RED)Migration validation failed!$(NC)" && exit 1)
	@echo "$(GREEN)All migrations are valid!$(NC)"

.PHONY: migrate-reset
migrate-reset:
	@echo "$(RED)WARNING: This will drop all data!$(NC)"
	@echo "Press Ctrl+C to cancel or Enter to continue..."
	@read confirm
	@migrate -path $(MIGRATION_DIR) -database "$(DSN)" drop -f
	@echo "$(GREEN)Database reset completed!$(NC)"

# Docker-based migrations (for CI/CD)
.PHONY: migrate-up-docker
migrate-up-docker:
	@docker run --rm -v $(PWD)/migrations/sql:/migrations \
		--network host \
		migrate/migrate \
		-path=/migrations \
		-database="$(DSN)" \
		up

.PHONY: migrate-validate-docker
migrate-validate-docker:
	@docker run --rm -v $(PWD)/migrations/sql:/migrations \
		--network host \
		migrate/migrate \
		-path=/migrations \
		-database="$(DSN)" \
		version