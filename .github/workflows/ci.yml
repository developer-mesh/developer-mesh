name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24.4'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_PREFIX: ${{ github.repository_owner }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Set GOWORK environment variable
        run: echo "GOWORK=${{ github.workspace }}/go.work" >> $GITHUB_ENV

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6

      - name: Run go work sync
        run: |
          go version
          go env GOWORK
          go work sync

      - name: Run go mod download for all modules
        run: |
          # Download dependencies for workspace
          go mod download
          # Download dependencies for each module
          cd apps/mcp-server && go mod download && cd ../..
          cd apps/rest-api && go mod download && cd ../..
          cd apps/worker && go mod download && cd ../..
          cd apps/mockserver && go mod download && cd ../..
          cd pkg && go mod download && cd ..
          # Ensure work sync
          go work sync

      - name: Run go fmt
        run: |
          fmt_output=$(find . -name "*.go" -not -path "./.claude/*" -not -path "./vendor/*" -not -path "./.git/*" | xargs gofmt -l)
          if [ -n "$fmt_output" ]; then
            echo "The following files need formatting:"
            echo "$fmt_output"
            exit 1
          fi

      - name: Run go vet
        run: |
          # Run go vet for each module in the workspace
          cd apps/mcp-server && go vet ./... && cd ../..
          cd apps/rest-api && go vet ./... && cd ../..
          cd apps/worker && go vet ./... && cd ../..
          cd apps/mockserver && go vet ./... && cd ../..
          cd pkg && go vet ./... && cd ..

      - name: Run golangci-lint
        run: |
          make lint

      - name: Run tests
        run: |
          echo "Running unit tests..."
          go test -v -short ./apps/mcp-server/... ./apps/rest-api/... ./apps/worker/... ./pkg/...
        env:
          REDIS_ADDR: localhost:6379
          REDIS_PASSWORD: ""
          REDIS_TLS_ENABLED: false
          BEDROCK_ENABLED: false
          LOG_LEVEL: debug

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [mcp-server, rest-api, worker]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/developer-mesh-${{ matrix.app }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=main-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}