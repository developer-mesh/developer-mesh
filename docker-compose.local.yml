version: '3.8'

services:
  mcp-server:
    build:
      context: .
      dockerfile: apps/mcp-server/Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Core settings
      - ENVIRONMENT=docker
      - MCP_CONFIG_FILE=/app/configs/config.docker.yaml
      - API_HOST=0.0.0.0
      - API_PORT=8080
      # Authentication
      - JWT_SECRET=${JWT_SECRET:-docker-jwt-secret-change-in-production}
      - ADMIN_API_KEY=${ADMIN_API_KEY:-docker-admin-api-key}
      - READER_API_KEY=${READER_API_KEY:-docker-reader-api-key}
      - MCP_API_KEY=${MCP_API_KEY:-docker-admin-api-key}
      # Database (using service names)
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=dev
      - DATABASE_USER=dev
      - DATABASE_PASSWORD=dev
      - DATABASE_SSL_MODE=disable
      - DATABASE_DSN=postgres://dev:dev@database:5432/dev?sslmode=disable
      # Redis (using service names)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ADDR=redis:6379
      - CACHE_TYPE=redis
      # AWS/LocalStack
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-test}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-test}
      - AWS_ENDPOINT_URL=http://localstack:4566
      - S3_BUCKET=${S3_BUCKET:-mcp-contexts}
      - S3_ENDPOINT=http://localstack:4566
      - S3_USE_PATH_STYLE=true
      # GitHub Integration
      - GITHUB_TOKEN=${GITHUB_TOKEN:-test-github-token}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET:-docker-github-webhook-secret}
      - GITHUB_OWNER=${GITHUB_OWNER:-test-org}
      - GITHUB_REPO=${GITHUB_REPO:-test-repo}
      - GITHUB_APP_ID=${GITHUB_APP_ID:-}
      - GITHUB_INSTALLATION_ID=${GITHUB_INSTALLATION_ID:-}
      - GITHUB_PRIVATE_KEY_PATH=${GITHUB_PRIVATE_KEY_PATH:-}
      # Mock Server
      - MOCKSERVER_URL=http://mockserver:8081
      - MOCK_RESPONSES_ENABLED=${MOCK_RESPONSES_ENABLED:-true}
      # Vector Search
      - VECTOR_ENABLED=${VECTOR_ENABLED:-true}
      - VECTOR_DEFAULT_MODEL=${VECTOR_DEFAULT_MODEL:-text-embedding-ada-002}
      - VECTOR_DEFAULT_DIMENSION=${VECTOR_DEFAULT_DIMENSION:-1536}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Monitoring
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=json
      - PROMETHEUS_ENABLED=true
      - METRICS_PATH=/metrics
      # Security
      - CORS_ENABLED=true
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_PERIOD=1m
      - CREDENTIAL_ENCRYPTION_KEY=${CREDENTIAL_ENCRYPTION_KEY:-docker-encryption-key-32-chars-ok!}
      # Feature Flags
      - FEATURE_WEBHOOKS_ENABLED=true
      - FEATURE_VECTOR_SEARCH_ENABLED=true
      - FEATURE_GITHUB_INTEGRATION_ENABLED=true
    volumes:
      - ./configs:/app/configs:ro
      - ./apps/mcp-server/configs:/app/server-configs:ro
      - ./migrations/sql:/app/migrations:ro
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network
      
  rest-api:
    build:
      context: .
      dockerfile: ./apps/rest-api/Dockerfile
    ports:
      - "8081:8080"
    environment:
      # Core settings
      - ENVIRONMENT=docker
      - MCP_CONFIG_FILE=/app/configs/config.docker.yaml
      - USE_MOCK_CONTEXT_MANAGER=false
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - MCP_SERVER_URL=http://mcp-server:8080
      # Authentication
      - JWT_SECRET=${JWT_SECRET:-docker-jwt-secret-change-in-production}
      - ADMIN_API_KEY=${ADMIN_API_KEY:-docker-admin-api-key}
      - READER_API_KEY=${READER_API_KEY:-docker-reader-api-key}
      - MCP_API_KEY=${MCP_API_KEY:-docker-admin-api-key}
      # Database (using service names)
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=dev
      - DATABASE_USER=dev
      - DATABASE_PASSWORD=dev
      - DATABASE_SSL_MODE=disable
      - DATABASE_DSN=postgres://dev:dev@database:5432/dev?sslmode=disable
      # Redis (using service names)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ADDR=redis:6379
      - CACHE_TYPE=redis
      # AWS/LocalStack
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-test}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-test}
      - AWS_ENDPOINT_URL=http://localstack:4566
      - S3_BUCKET=${S3_BUCKET:-mcp-contexts}
      - S3_ENDPOINT=http://localstack:4566
      - S3_USE_PATH_STYLE=true
      # GitHub Integration
      - GITHUB_TOKEN=${GITHUB_TOKEN:-test-github-token}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET:-docker-github-webhook-secret}
      - GITHUB_OWNER=${GITHUB_OWNER:-test-org}
      - GITHUB_REPO=${GITHUB_REPO:-test-repo}
      # Mock Server
      - MOCKSERVER_URL=http://mockserver:8081
      - MOCK_RESPONSES_ENABLED=${MOCK_RESPONSES_ENABLED:-true}
      # Vector Search
      - VECTOR_ENABLED=${VECTOR_ENABLED:-true}
      - VECTOR_DEFAULT_MODEL=${VECTOR_DEFAULT_MODEL:-text-embedding-ada-002}
      - VECTOR_DEFAULT_DIMENSION=${VECTOR_DEFAULT_DIMENSION:-1536}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Monitoring
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=json
      - PROMETHEUS_ENABLED=true
      # Security
      - CORS_ENABLED=true
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
      - RATE_LIMIT_ENABLED=true
      - CREDENTIAL_ENCRYPTION_KEY=${CREDENTIAL_ENCRYPTION_KEY:-docker-encryption-key-32-chars-ok!}
      # Feature Flags
      - FEATURE_WEBHOOKS_ENABLED=true
      - FEATURE_VECTOR_SEARCH_ENABLED=true
      - FEATURE_GITHUB_INTEGRATION_ENABLED=true
    volumes:
      - ./configs:/app/configs:ro
      - ./apps/rest-api/configs:/app/api-configs:ro
      - ./migrations/sql:/app/migrations:ro
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network
      
  worker:
    build:
      context: .
      dockerfile: apps/worker/Dockerfile
    environment:
      # Core settings
      - ENVIRONMENT=docker
      - APP_ENV=development
      # Database (using service names)
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=dev
      - DATABASE_USER=dev
      - DATABASE_PASSWORD=dev
      - DATABASE_DSN=postgresql://dev:dev@database:5432/dev?sslmode=disable
      # Redis (using service names)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ADDR=redis:6379
      # AWS/LocalStack configuration
      - USE_LOCALSTACK=true
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-test}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-test}
      # SQS configuration
      - SQS_QUEUE_NAME=tasks
      - SQS_QUEUE_URL=http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/tasks
      # Worker configuration
      - WORKER_QUEUE_TYPE=${WORKER_QUEUE_TYPE:-sqs}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-5}
      # Optional: Enable mock mode if LocalStack isn't available
      # - WORKER_MOCK_MODE=true
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
      localstack:
        condition: service_healthy
      localstack-init:
        condition: service_completed_successfully
    volumes:
      - ./apps/worker/configs:/app/configs
    networks:
      - mcp-network
  
  database:
    image: pgvector/pgvector:pg17
    environment:
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=dev
      - POSTGRES_DB=dev
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Database initialization script for direct schema setup
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--requirepass", "", "--protected-mode", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  localstack:
    image: localstack/localstack:3.4
    ports:
      - "4566:4566"
    environment:
      - SERVICES=sqs
      - DEBUG=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - mcp-network
      
  # LocalStack initialization service to create required resources
  localstack-init:
    image: amazon/aws-cli:latest
    depends_on:
      localstack:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
        echo 'Creating SQS queue...' &&
        aws --endpoint-url=http://localstack:4566 sqs create-queue --queue-name tasks &&
        echo 'SQS queue created successfully' &&
        # Print the queue URL for debugging
        aws --endpoint-url=http://localstack:4566 sqs get-queue-url --queue-name tasks
      "
    networks:
      - mcp-network

volumes:
  postgres-data:
  redis-data:

networks:
  mcp-network:
    driver: bridge
