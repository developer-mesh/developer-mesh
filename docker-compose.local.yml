version: '3.8'

services:
  mcp-server:
    build:
      context: .
      dockerfile: apps/mcp-server/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=development
      - DATABASE_DSN=postgresql://dev:dev@database:5432/dev?sslmode=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/mcp-server/configs:/app/configs
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network
      
  rest-api:
    build:
      context: .
      dockerfile: apps/rest-api/Dockerfile
    ports:
      - "8081:8080"
    environment:
      - APP_ENV=development
      - DATABASE_DSN=postgresql://dev:dev@database:5432/dev?sslmode=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/rest-api/configs:/app/configs
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network
      
  worker:
    build:
      context: .
      dockerfile: apps/worker/Dockerfile
    environment:
      - APP_ENV=development
      - DATABASE_DSN=postgresql://dev:dev@database:5432/dev?sslmode=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    volumes:
      - ./apps/worker/configs:/app/configs
    networks:
      - mcp-network
  
  database:
    image: pgvector/pgvector:pg17
    environment:
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=dev
      - POSTGRES_DB=dev
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Uncomment if you have initialization scripts
      # - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--requirepass", "", "--protected-mode", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  localstack:
    image: localstack/localstack:3.4
    ports:
      - "4566:4566"
    environment:
      - SERVICES=sqs
      - DEBUG=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - mcp-network

volumes:
  postgres-data:
  redis-data:

networks:
  mcp-network:
    driver: bridge
