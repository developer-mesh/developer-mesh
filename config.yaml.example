# DevOps MCP Configuration Example
# Copy this file to config.yaml and update with your settings

# Environment: dev, staging, prod
environment: "dev"

# API Server Configuration
api:
  listen_address: ":8080"  # MCP Server port
  read_timeout: 30s
  write_timeout: 30s
  idle_timeout: 60s
  enable_cors: true
  
  # Authentication (change these!)
  auth:
    jwt_secret: "change-this-to-a-secure-secret"
    api_keys:
      admin: "change-this-admin-key"
      reader: "change-this-reader-key"
  
  # Rate limiting
  rate_limit:
    enabled: true
    limit: 100
    period: 1m
    burst_factor: 3
  
  # Webhooks
  webhooks:
    github:
      enabled: true
      path: "/github"
      secret: "change-this-webhook-secret"
  
  # WebSocket Configuration
  websocket:
    enabled: true  # Enable for real-time communication
    max_connections: 1000
    read_buffer_size: 4096
    write_buffer_size: 4096
    ping_interval: 30s
    pong_timeout: 60s
    max_message_size: 1048576  # 1MB
    
    # Security settings
    security:
      require_auth: true
      hmac_signatures: false
      allowed_origins: ["*"]  # Restrict in production!
      max_frame_size: 1048576
      
    # Rate limiting
    rate_limit:
      rate: 16.67  # 1000 per minute
      burst: 100
      per_ip: true
      per_user: true

# Database Configuration
database:
  driver: "postgres"
  # Local development DSN
  dsn: "postgres://dev:dev@localhost:5432/dev?sslmode=disable"
  max_open_conns: 25
  max_idle_conns: 5
  conn_max_lifetime: 30m

# Cache Configuration
cache:
  type: "redis"
  address: "localhost:6379"
  password: ""
  db: 0
  pool_size: 10
  min_idle_conns: 2
  dial_timeout: 5s
  read_timeout: 3s
  write_timeout: 3s

# Core Engine Configuration
engine:
  event_buffer_size: 10000
  concurrency_limit: 10
  event_timeout: 30s
  security:
    safe_mode: true
    audit_logging: true

# DevOps Tool Adapters
adapters:
  github:
    # Get token from: https://github.com/settings/tokens
    api_token: "your-github-api-token"
    webhook_secret: "your-github-webhook-secret"
    request_timeout: 30s
    retry_max: 3
    retry_delay: 1s
    # Use mock server for testing
    mock_responses: true
    mock_url: "http://localhost:8081/mock-github"

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    path: "/metrics"
  
  logging:
    level: "info"  # debug, info, warn, error
    format: "json"
    output: "stdout"

# AWS Configuration (for local development with real AWS services)
aws:
  region: "us-east-1"  # Or use ${AWS_REGION}
  
  # ElastiCache Redis (replaces local Redis)
  elasticache:
    endpoint: "sean-mcp-test-qem3fz.serverless.use1.cache.amazonaws.com:6379"
    # auth_token: "your-auth-token"  # If AUTH is enabled
    
  # S3 for context storage
  s3:
    bucket: "mcp-dev-contexts"  # Or use ${S3_BUCKET}
    # Empty endpoint uses real AWS S3
    # endpoint: "http://localhost:4566"  # For LocalStack testing
    
  # SQS for async processing
  sqs:
    queue_url: "https://sqs.us-east-1.amazonaws.com/594992249511/sean-mcp-test"
    # endpoint: "http://localhost:4566"  # For LocalStack testing
    
  # Bedrock for embeddings
  bedrock:
    enabled: true
    # endpoint: "http://localhost:4566"  # For LocalStack testing

# Worker Configuration (for async processing)
worker:
  enabled: true
  queue_type: "sqs"  # or "memory" for local testing
  concurrency: 10
  
# Storage Configuration
storage:
  context:
    provider: "s3"  # or "filesystem" for local development
    # filesystem:
    #   base_path: "./data/contexts"
      
# To use local services instead of AWS:
# 1. Set cache.address to "localhost:6379" 
# 2. Set storage.context.provider to "filesystem"
# 3. Set worker.queue_type to "memory"
# 4. Comment out the aws section